// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanode.proto

#ifndef PROTOBUF_INCLUDED_datanode_2eproto
#define PROTOBUF_INCLUDED_datanode_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_datanode_2eproto 

namespace protobuf_datanode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_datanode_2eproto
namespace snail {
namespace stream {
class DeleteExtentReq;
class DeleteExtentReqDefaultTypeInternal;
extern DeleteExtentReqDefaultTypeInternal _DeleteExtentReq_default_instance_;
class GetExtentReq;
class GetExtentReqDefaultTypeInternal;
extern GetExtentReqDefaultTypeInternal _GetExtentReq_default_instance_;
class GetExtentResp;
class GetExtentRespDefaultTypeInternal;
extern GetExtentRespDefaultTypeInternal _GetExtentResp_default_instance_;
class ReadExtentReq;
class ReadExtentReqDefaultTypeInternal;
extern ReadExtentReqDefaultTypeInternal _ReadExtentReq_default_instance_;
class ReadExtentResp;
class ReadExtentRespDefaultTypeInternal;
extern ReadExtentRespDefaultTypeInternal _ReadExtentResp_default_instance_;
class UpdateDiskStatusReq;
class UpdateDiskStatusReqDefaultTypeInternal;
extern UpdateDiskStatusReqDefaultTypeInternal _UpdateDiskStatusReq_default_instance_;
class WriteExtentReq;
class WriteExtentReqDefaultTypeInternal;
extern WriteExtentReqDefaultTypeInternal _WriteExtentReq_default_instance_;
}  // namespace stream
}  // namespace snail
namespace google {
namespace protobuf {
template<> ::snail::stream::DeleteExtentReq* Arena::CreateMaybeMessage<::snail::stream::DeleteExtentReq>(Arena*);
template<> ::snail::stream::GetExtentReq* Arena::CreateMaybeMessage<::snail::stream::GetExtentReq>(Arena*);
template<> ::snail::stream::GetExtentResp* Arena::CreateMaybeMessage<::snail::stream::GetExtentResp>(Arena*);
template<> ::snail::stream::ReadExtentReq* Arena::CreateMaybeMessage<::snail::stream::ReadExtentReq>(Arena*);
template<> ::snail::stream::ReadExtentResp* Arena::CreateMaybeMessage<::snail::stream::ReadExtentResp>(Arena*);
template<> ::snail::stream::UpdateDiskStatusReq* Arena::CreateMaybeMessage<::snail::stream::UpdateDiskStatusReq>(Arena*);
template<> ::snail::stream::WriteExtentReq* Arena::CreateMaybeMessage<::snail::stream::WriteExtentReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace snail {
namespace stream {

// ===================================================================

class WriteExtentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.WriteExtentReq) */ {
 public:
  WriteExtentReq();
  virtual ~WriteExtentReq();

  WriteExtentReq(const WriteExtentReq& from);

  inline WriteExtentReq& operator=(const WriteExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteExtentReq(WriteExtentReq&& from) noexcept
    : WriteExtentReq() {
    *this = ::std::move(from);
  }

  inline WriteExtentReq& operator=(WriteExtentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteExtentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteExtentReq* internal_default_instance() {
    return reinterpret_cast<const WriteExtentReq*>(
               &_WriteExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WriteExtentReq* other);
  friend void swap(WriteExtentReq& a, WriteExtentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteExtentReq* New() const final {
    return CreateMaybeMessage<WriteExtentReq>(NULL);
  }

  WriteExtentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteExtentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteExtentReq& from);
  void MergeFrom(const WriteExtentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteExtentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string extent_id = 3;
  void clear_extent_id();
  static const int kExtentIdFieldNumber = 3;
  const ::std::string& extent_id() const;
  void set_extent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_extent_id(::std::string&& value);
  #endif
  void set_extent_id(const char* value);
  void set_extent_id(const char* value, size_t size);
  ::std::string* mutable_extent_id();
  ::std::string* release_extent_id();
  void set_allocated_extent_id(::std::string* extent_id);

  // .snail.stream.CommonReq base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonReq& _internal_base() const;
  public:
  const ::snail::stream::CommonReq& base() const;
  ::snail::stream::CommonReq* release_base();
  ::snail::stream::CommonReq* mutable_base();
  void set_allocated_base(::snail::stream::CommonReq* base);

  // uint64 off = 4;
  void clear_off();
  static const int kOffFieldNumber = 4;
  ::google::protobuf::uint64 off() const;
  void set_off(::google::protobuf::uint64 value);

  // uint64 len = 5;
  void clear_len();
  static const int kLenFieldNumber = 5;
  ::google::protobuf::uint64 len() const;
  void set_len(::google::protobuf::uint64 value);

  // uint32 diskid = 2;
  void clear_diskid();
  static const int kDiskidFieldNumber = 2;
  ::google::protobuf::uint32 diskid() const;
  void set_diskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:snail.stream.WriteExtentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonReq* base_;
  ::google::protobuf::uint64 off_;
  ::google::protobuf::uint64 len_;
  ::google::protobuf::uint32 diskid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadExtentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.ReadExtentReq) */ {
 public:
  ReadExtentReq();
  virtual ~ReadExtentReq();

  ReadExtentReq(const ReadExtentReq& from);

  inline ReadExtentReq& operator=(const ReadExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadExtentReq(ReadExtentReq&& from) noexcept
    : ReadExtentReq() {
    *this = ::std::move(from);
  }

  inline ReadExtentReq& operator=(ReadExtentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadExtentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadExtentReq* internal_default_instance() {
    return reinterpret_cast<const ReadExtentReq*>(
               &_ReadExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReadExtentReq* other);
  friend void swap(ReadExtentReq& a, ReadExtentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadExtentReq* New() const final {
    return CreateMaybeMessage<ReadExtentReq>(NULL);
  }

  ReadExtentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadExtentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadExtentReq& from);
  void MergeFrom(const ReadExtentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadExtentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string extent_id = 3;
  void clear_extent_id();
  static const int kExtentIdFieldNumber = 3;
  const ::std::string& extent_id() const;
  void set_extent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_extent_id(::std::string&& value);
  #endif
  void set_extent_id(const char* value);
  void set_extent_id(const char* value, size_t size);
  ::std::string* mutable_extent_id();
  ::std::string* release_extent_id();
  void set_allocated_extent_id(::std::string* extent_id);

  // .snail.stream.CommonReq base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonReq& _internal_base() const;
  public:
  const ::snail::stream::CommonReq& base() const;
  ::snail::stream::CommonReq* release_base();
  ::snail::stream::CommonReq* mutable_base();
  void set_allocated_base(::snail::stream::CommonReq* base);

  // uint64 off = 4;
  void clear_off();
  static const int kOffFieldNumber = 4;
  ::google::protobuf::uint64 off() const;
  void set_off(::google::protobuf::uint64 value);

  // uint64 len = 5;
  void clear_len();
  static const int kLenFieldNumber = 5;
  ::google::protobuf::uint64 len() const;
  void set_len(::google::protobuf::uint64 value);

  // uint32 diskid = 2;
  void clear_diskid();
  static const int kDiskidFieldNumber = 2;
  ::google::protobuf::uint32 diskid() const;
  void set_diskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:snail.stream.ReadExtentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonReq* base_;
  ::google::protobuf::uint64 off_;
  ::google::protobuf::uint64 len_;
  ::google::protobuf::uint32 diskid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadExtentResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.ReadExtentResp) */ {
 public:
  ReadExtentResp();
  virtual ~ReadExtentResp();

  ReadExtentResp(const ReadExtentResp& from);

  inline ReadExtentResp& operator=(const ReadExtentResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadExtentResp(ReadExtentResp&& from) noexcept
    : ReadExtentResp() {
    *this = ::std::move(from);
  }

  inline ReadExtentResp& operator=(ReadExtentResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadExtentResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadExtentResp* internal_default_instance() {
    return reinterpret_cast<const ReadExtentResp*>(
               &_ReadExtentResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReadExtentResp* other);
  friend void swap(ReadExtentResp& a, ReadExtentResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadExtentResp* New() const final {
    return CreateMaybeMessage<ReadExtentResp>(NULL);
  }

  ReadExtentResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadExtentResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadExtentResp& from);
  void MergeFrom(const ReadExtentResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadExtentResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  public:
  const ::snail::stream::CommonResp& base() const;
  ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);

  // uint64 len = 2;
  void clear_len();
  static const int kLenFieldNumber = 2;
  ::google::protobuf::uint64 len() const;
  void set_len(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:snail.stream.ReadExtentResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::snail::stream::CommonResp* base_;
  ::google::protobuf::uint64 len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteExtentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.DeleteExtentReq) */ {
 public:
  DeleteExtentReq();
  virtual ~DeleteExtentReq();

  DeleteExtentReq(const DeleteExtentReq& from);

  inline DeleteExtentReq& operator=(const DeleteExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteExtentReq(DeleteExtentReq&& from) noexcept
    : DeleteExtentReq() {
    *this = ::std::move(from);
  }

  inline DeleteExtentReq& operator=(DeleteExtentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteExtentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteExtentReq* internal_default_instance() {
    return reinterpret_cast<const DeleteExtentReq*>(
               &_DeleteExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeleteExtentReq* other);
  friend void swap(DeleteExtentReq& a, DeleteExtentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteExtentReq* New() const final {
    return CreateMaybeMessage<DeleteExtentReq>(NULL);
  }

  DeleteExtentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteExtentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteExtentReq& from);
  void MergeFrom(const DeleteExtentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteExtentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string extent_id = 2;
  void clear_extent_id();
  static const int kExtentIdFieldNumber = 2;
  const ::std::string& extent_id() const;
  void set_extent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_extent_id(::std::string&& value);
  #endif
  void set_extent_id(const char* value);
  void set_extent_id(const char* value, size_t size);
  ::std::string* mutable_extent_id();
  ::std::string* release_extent_id();
  void set_allocated_extent_id(::std::string* extent_id);

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  public:
  const ::snail::stream::CommonResp& base() const;
  ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);

  // @@protoc_insertion_point(class_scope:snail.stream.DeleteExtentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonResp* base_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetExtentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.GetExtentReq) */ {
 public:
  GetExtentReq();
  virtual ~GetExtentReq();

  GetExtentReq(const GetExtentReq& from);

  inline GetExtentReq& operator=(const GetExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetExtentReq(GetExtentReq&& from) noexcept
    : GetExtentReq() {
    *this = ::std::move(from);
  }

  inline GetExtentReq& operator=(GetExtentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetExtentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetExtentReq* internal_default_instance() {
    return reinterpret_cast<const GetExtentReq*>(
               &_GetExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetExtentReq* other);
  friend void swap(GetExtentReq& a, GetExtentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetExtentReq* New() const final {
    return CreateMaybeMessage<GetExtentReq>(NULL);
  }

  GetExtentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetExtentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetExtentReq& from);
  void MergeFrom(const GetExtentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetExtentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string extent_id = 2;
  void clear_extent_id();
  static const int kExtentIdFieldNumber = 2;
  const ::std::string& extent_id() const;
  void set_extent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_extent_id(::std::string&& value);
  #endif
  void set_extent_id(const char* value);
  void set_extent_id(const char* value, size_t size);
  ::std::string* mutable_extent_id();
  ::std::string* release_extent_id();
  void set_allocated_extent_id(::std::string* extent_id);

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  public:
  const ::snail::stream::CommonResp& base() const;
  ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);

  // @@protoc_insertion_point(class_scope:snail.stream.GetExtentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonResp* base_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetExtentResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.GetExtentResp) */ {
 public:
  GetExtentResp();
  virtual ~GetExtentResp();

  GetExtentResp(const GetExtentResp& from);

  inline GetExtentResp& operator=(const GetExtentResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetExtentResp(GetExtentResp&& from) noexcept
    : GetExtentResp() {
    *this = ::std::move(from);
  }

  inline GetExtentResp& operator=(GetExtentResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetExtentResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetExtentResp* internal_default_instance() {
    return reinterpret_cast<const GetExtentResp*>(
               &_GetExtentResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetExtentResp* other);
  friend void swap(GetExtentResp& a, GetExtentResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetExtentResp* New() const final {
    return CreateMaybeMessage<GetExtentResp>(NULL);
  }

  GetExtentResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetExtentResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetExtentResp& from);
  void MergeFrom(const GetExtentResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetExtentResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  public:
  const ::snail::stream::CommonResp& base() const;
  ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);

  // uint64 len = 2;
  void clear_len();
  static const int kLenFieldNumber = 2;
  ::google::protobuf::uint64 len() const;
  void set_len(::google::protobuf::uint64 value);

  // uint32 ctime = 3;
  void clear_ctime();
  static const int kCtimeFieldNumber = 3;
  ::google::protobuf::uint32 ctime() const;
  void set_ctime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:snail.stream.GetExtentResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::snail::stream::CommonResp* base_;
  ::google::protobuf::uint64 len_;
  ::google::protobuf::uint32 ctime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateDiskStatusReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.UpdateDiskStatusReq) */ {
 public:
  UpdateDiskStatusReq();
  virtual ~UpdateDiskStatusReq();

  UpdateDiskStatusReq(const UpdateDiskStatusReq& from);

  inline UpdateDiskStatusReq& operator=(const UpdateDiskStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDiskStatusReq(UpdateDiskStatusReq&& from) noexcept
    : UpdateDiskStatusReq() {
    *this = ::std::move(from);
  }

  inline UpdateDiskStatusReq& operator=(UpdateDiskStatusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDiskStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDiskStatusReq* internal_default_instance() {
    return reinterpret_cast<const UpdateDiskStatusReq*>(
               &_UpdateDiskStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UpdateDiskStatusReq* other);
  friend void swap(UpdateDiskStatusReq& a, UpdateDiskStatusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDiskStatusReq* New() const final {
    return CreateMaybeMessage<UpdateDiskStatusReq>(NULL);
  }

  UpdateDiskStatusReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDiskStatusReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateDiskStatusReq& from);
  void MergeFrom(const UpdateDiskStatusReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDiskStatusReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  public:
  const ::snail::stream::CommonResp& base() const;
  ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);

  // uint32 diskid = 2;
  void clear_diskid();
  static const int kDiskidFieldNumber = 2;
  ::google::protobuf::uint32 diskid() const;
  void set_diskid(::google::protobuf::uint32 value);

  // uint32 status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:snail.stream.UpdateDiskStatusReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::snail::stream::CommonResp* base_;
  ::google::protobuf::uint32 diskid_;
  ::google::protobuf::uint32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteExtentReq

// .snail.stream.CommonReq base = 1;
inline bool WriteExtentReq::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonReq& WriteExtentReq::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonReq& WriteExtentReq::base() const {
  const ::snail::stream::CommonReq* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonReq*>(
      &::snail::stream::_CommonReq_default_instance_);
}
inline ::snail::stream::CommonReq* WriteExtentReq::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.WriteExtentReq.base)
  
  ::snail::stream::CommonReq* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonReq* WriteExtentReq::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonReq>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.WriteExtentReq.base)
  return base_;
}
inline void WriteExtentReq::set_allocated_base(::snail::stream::CommonReq* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.WriteExtentReq.base)
}

// uint32 diskid = 2;
inline void WriteExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::google::protobuf::uint32 WriteExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.diskid)
  return diskid_;
}
inline void WriteExtentReq::set_diskid(::google::protobuf::uint32 value) {
  
  diskid_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.diskid)
}

// string extent_id = 3;
inline void WriteExtentReq::clear_extent_id() {
  extent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.extent_id)
  return extent_id_.GetNoArena();
}
inline void WriteExtentReq::set_extent_id(const ::std::string& value) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.extent_id)
}
#if LANG_CXX11
inline void WriteExtentReq::set_extent_id(::std::string&& value) {
  
  extent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snail.stream.WriteExtentReq.extent_id)
}
#endif
inline void WriteExtentReq::set_extent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snail.stream.WriteExtentReq.extent_id)
}
inline void WriteExtentReq::set_extent_id(const char* value, size_t size) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snail.stream.WriteExtentReq.extent_id)
}
inline ::std::string* WriteExtentReq::mutable_extent_id() {
  
  // @@protoc_insertion_point(field_mutable:snail.stream.WriteExtentReq.extent_id)
  return extent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.WriteExtentReq.extent_id)
  
  return extent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteExtentReq::set_allocated_extent_id(::std::string* extent_id) {
  if (extent_id != NULL) {
    
  } else {
    
  }
  extent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extent_id);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.WriteExtentReq.extent_id)
}

// uint64 off = 4;
inline void WriteExtentReq::clear_off() {
  off_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteExtentReq::off() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.off)
  return off_;
}
inline void WriteExtentReq::set_off(::google::protobuf::uint64 value) {
  
  off_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.off)
}

// uint64 len = 5;
inline void WriteExtentReq::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WriteExtentReq::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.len)
  return len_;
}
inline void WriteExtentReq::set_len(::google::protobuf::uint64 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.len)
}

// -------------------------------------------------------------------

// ReadExtentReq

// .snail.stream.CommonReq base = 1;
inline bool ReadExtentReq::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonReq& ReadExtentReq::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonReq& ReadExtentReq::base() const {
  const ::snail::stream::CommonReq* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonReq*>(
      &::snail::stream::_CommonReq_default_instance_);
}
inline ::snail::stream::CommonReq* ReadExtentReq::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentReq.base)
  
  ::snail::stream::CommonReq* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonReq* ReadExtentReq::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonReq>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentReq.base)
  return base_;
}
inline void ReadExtentReq::set_allocated_base(::snail::stream::CommonReq* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentReq.base)
}

// uint32 diskid = 2;
inline void ReadExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::google::protobuf::uint32 ReadExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.diskid)
  return diskid_;
}
inline void ReadExtentReq::set_diskid(::google::protobuf::uint32 value) {
  
  diskid_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.diskid)
}

// string extent_id = 3;
inline void ReadExtentReq::clear_extent_id() {
  extent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.extent_id)
  return extent_id_.GetNoArena();
}
inline void ReadExtentReq::set_extent_id(const ::std::string& value) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.extent_id)
}
#if LANG_CXX11
inline void ReadExtentReq::set_extent_id(::std::string&& value) {
  
  extent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snail.stream.ReadExtentReq.extent_id)
}
#endif
inline void ReadExtentReq::set_extent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snail.stream.ReadExtentReq.extent_id)
}
inline void ReadExtentReq::set_extent_id(const char* value, size_t size) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snail.stream.ReadExtentReq.extent_id)
}
inline ::std::string* ReadExtentReq::mutable_extent_id() {
  
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentReq.extent_id)
  return extent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentReq.extent_id)
  
  return extent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadExtentReq::set_allocated_extent_id(::std::string* extent_id) {
  if (extent_id != NULL) {
    
  } else {
    
  }
  extent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extent_id);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentReq.extent_id)
}

// uint64 off = 4;
inline void ReadExtentReq::clear_off() {
  off_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadExtentReq::off() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.off)
  return off_;
}
inline void ReadExtentReq::set_off(::google::protobuf::uint64 value) {
  
  off_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.off)
}

// uint64 len = 5;
inline void ReadExtentReq::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadExtentReq::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.len)
  return len_;
}
inline void ReadExtentReq::set_len(::google::protobuf::uint64 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.len)
}

// -------------------------------------------------------------------

// ReadExtentResp

// .snail.stream.CommonResp base = 1;
inline bool ReadExtentResp::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonResp& ReadExtentResp::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonResp& ReadExtentResp::base() const {
  const ::snail::stream::CommonResp* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentResp.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonResp*>(
      &::snail::stream::_CommonResp_default_instance_);
}
inline ::snail::stream::CommonResp* ReadExtentResp::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentResp.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonResp* ReadExtentResp::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentResp.base)
  return base_;
}
inline void ReadExtentResp::set_allocated_base(::snail::stream::CommonResp* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentResp.base)
}

// uint64 len = 2;
inline void ReadExtentResp::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadExtentResp::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentResp.len)
  return len_;
}
inline void ReadExtentResp::set_len(::google::protobuf::uint64 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentResp.len)
}

// -------------------------------------------------------------------

// DeleteExtentReq

// .snail.stream.CommonResp base = 1;
inline bool DeleteExtentReq::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonResp& DeleteExtentReq::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonResp& DeleteExtentReq::base() const {
  const ::snail::stream::CommonResp* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonResp*>(
      &::snail::stream::_CommonResp_default_instance_);
}
inline ::snail::stream::CommonResp* DeleteExtentReq::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.DeleteExtentReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.DeleteExtentReq.base)
  return base_;
}
inline void DeleteExtentReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.DeleteExtentReq.base)
}

// string extent_id = 2;
inline void DeleteExtentReq::clear_extent_id() {
  extent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.extent_id)
  return extent_id_.GetNoArena();
}
inline void DeleteExtentReq::set_extent_id(const ::std::string& value) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snail.stream.DeleteExtentReq.extent_id)
}
#if LANG_CXX11
inline void DeleteExtentReq::set_extent_id(::std::string&& value) {
  
  extent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snail.stream.DeleteExtentReq.extent_id)
}
#endif
inline void DeleteExtentReq::set_extent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snail.stream.DeleteExtentReq.extent_id)
}
inline void DeleteExtentReq::set_extent_id(const char* value, size_t size) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snail.stream.DeleteExtentReq.extent_id)
}
inline ::std::string* DeleteExtentReq::mutable_extent_id() {
  
  // @@protoc_insertion_point(field_mutable:snail.stream.DeleteExtentReq.extent_id)
  return extent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.DeleteExtentReq.extent_id)
  
  return extent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteExtentReq::set_allocated_extent_id(::std::string* extent_id) {
  if (extent_id != NULL) {
    
  } else {
    
  }
  extent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extent_id);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.DeleteExtentReq.extent_id)
}

// -------------------------------------------------------------------

// GetExtentReq

// .snail.stream.CommonResp base = 1;
inline bool GetExtentReq::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonResp& GetExtentReq::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonResp& GetExtentReq::base() const {
  const ::snail::stream::CommonResp* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonResp*>(
      &::snail::stream::_CommonResp_default_instance_);
}
inline ::snail::stream::CommonResp* GetExtentReq::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentReq::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentReq.base)
  return base_;
}
inline void GetExtentReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentReq.base)
}

// string extent_id = 2;
inline void GetExtentReq::clear_extent_id() {
  extent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.extent_id)
  return extent_id_.GetNoArena();
}
inline void GetExtentReq::set_extent_id(const ::std::string& value) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentReq.extent_id)
}
#if LANG_CXX11
inline void GetExtentReq::set_extent_id(::std::string&& value) {
  
  extent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snail.stream.GetExtentReq.extent_id)
}
#endif
inline void GetExtentReq::set_extent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snail.stream.GetExtentReq.extent_id)
}
inline void GetExtentReq::set_extent_id(const char* value, size_t size) {
  
  extent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snail.stream.GetExtentReq.extent_id)
}
inline ::std::string* GetExtentReq::mutable_extent_id() {
  
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentReq.extent_id)
  return extent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentReq.extent_id)
  
  return extent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetExtentReq::set_allocated_extent_id(::std::string* extent_id) {
  if (extent_id != NULL) {
    
  } else {
    
  }
  extent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extent_id);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentReq.extent_id)
}

// -------------------------------------------------------------------

// GetExtentResp

// .snail.stream.CommonResp base = 1;
inline bool GetExtentResp::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonResp& GetExtentResp::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonResp& GetExtentResp::base() const {
  const ::snail::stream::CommonResp* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonResp*>(
      &::snail::stream::_CommonResp_default_instance_);
}
inline ::snail::stream::CommonResp* GetExtentResp::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentResp.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentResp::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentResp.base)
  return base_;
}
inline void GetExtentResp::set_allocated_base(::snail::stream::CommonResp* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentResp.base)
}

// uint64 len = 2;
inline void GetExtentResp::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetExtentResp::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.len)
  return len_;
}
inline void GetExtentResp::set_len(::google::protobuf::uint64 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentResp.len)
}

// uint32 ctime = 3;
inline void GetExtentResp::clear_ctime() {
  ctime_ = 0u;
}
inline ::google::protobuf::uint32 GetExtentResp::ctime() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.ctime)
  return ctime_;
}
inline void GetExtentResp::set_ctime(::google::protobuf::uint32 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentResp.ctime)
}

// -------------------------------------------------------------------

// UpdateDiskStatusReq

// .snail.stream.CommonResp base = 1;
inline bool UpdateDiskStatusReq::has_base() const {
  return this != internal_default_instance() && base_ != NULL;
}
inline const ::snail::stream::CommonResp& UpdateDiskStatusReq::_internal_base() const {
  return *base_;
}
inline const ::snail::stream::CommonResp& UpdateDiskStatusReq::base() const {
  const ::snail::stream::CommonResp* p = base_;
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.base)
  return p != NULL ? *p : *reinterpret_cast<const ::snail::stream::CommonResp*>(
      &::snail::stream::_CommonResp_default_instance_);
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.UpdateDiskStatusReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = NULL;
  return temp;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::mutable_base() {
  
  if (base_ == NULL) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:snail.stream.UpdateDiskStatusReq.base)
  return base_;
}
inline void UpdateDiskStatusReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_);
  }
  if (base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.UpdateDiskStatusReq.base)
}

// uint32 diskid = 2;
inline void UpdateDiskStatusReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::google::protobuf::uint32 UpdateDiskStatusReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.diskid)
  return diskid_;
}
inline void UpdateDiskStatusReq::set_diskid(::google::protobuf::uint32 value) {
  
  diskid_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.UpdateDiskStatusReq.diskid)
}

// uint32 status = 3;
inline void UpdateDiskStatusReq::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 UpdateDiskStatusReq::status() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.status)
  return status_;
}
inline void UpdateDiskStatusReq::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.UpdateDiskStatusReq.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace snail

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_datanode_2eproto
