// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanode.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_datanode_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_datanode_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_datanode_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_datanode_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_datanode_2eproto;
namespace snail {
namespace stream {
class DeleteExtentReq;
struct DeleteExtentReqDefaultTypeInternal;
extern DeleteExtentReqDefaultTypeInternal _DeleteExtentReq_default_instance_;
class GetExtentReq;
struct GetExtentReqDefaultTypeInternal;
extern GetExtentReqDefaultTypeInternal _GetExtentReq_default_instance_;
class GetExtentResp;
struct GetExtentRespDefaultTypeInternal;
extern GetExtentRespDefaultTypeInternal _GetExtentResp_default_instance_;
class ReadExtentReq;
struct ReadExtentReqDefaultTypeInternal;
extern ReadExtentReqDefaultTypeInternal _ReadExtentReq_default_instance_;
class ReadExtentResp;
struct ReadExtentRespDefaultTypeInternal;
extern ReadExtentRespDefaultTypeInternal _ReadExtentResp_default_instance_;
class UpdateDiskStatusReq;
struct UpdateDiskStatusReqDefaultTypeInternal;
extern UpdateDiskStatusReqDefaultTypeInternal _UpdateDiskStatusReq_default_instance_;
class WriteExtentReq;
struct WriteExtentReqDefaultTypeInternal;
extern WriteExtentReqDefaultTypeInternal _WriteExtentReq_default_instance_;
}  // namespace stream
}  // namespace snail
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace snail {
namespace stream {
enum DatanodeMsgType : int {
  WRITE_EXTENT_REQ = 0,
  WRITE_EXTENT_RESP = 1,
  READ_EXTENT_REQ = 2,
  READ_EXTENT_RESP = 3,
  DELETE_EXTENT_REQ = 4,
  DELETE_EXTENT_RESP = 5,
  GET_EXTENT_REQ = 6,
  GET_EXTENT_RESP = 7,
  UPDATE_DISK_STATUS_REQ = 8,
  UPDATE_DISK_STATUS_RESP = 9,
  DatanodeMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DatanodeMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DatanodeMsgType_IsValid(int value);
extern const uint32_t DatanodeMsgType_internal_data_[];
constexpr DatanodeMsgType DatanodeMsgType_MIN = static_cast<DatanodeMsgType>(0);
constexpr DatanodeMsgType DatanodeMsgType_MAX = static_cast<DatanodeMsgType>(9);
constexpr int DatanodeMsgType_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
DatanodeMsgType_descriptor();
template <typename T>
const std::string& DatanodeMsgType_Name(T value) {
  static_assert(std::is_same<T, DatanodeMsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DatanodeMsgType_Name().");
  return DatanodeMsgType_Name(static_cast<DatanodeMsgType>(value));
}
template <>
inline const std::string& DatanodeMsgType_Name(DatanodeMsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DatanodeMsgType_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool DatanodeMsgType_Parse(absl::string_view name, DatanodeMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatanodeMsgType>(
      DatanodeMsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WriteExtentReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.WriteExtentReq) */ {
 public:
  inline WriteExtentReq() : WriteExtentReq(nullptr) {}
  ~WriteExtentReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WriteExtentReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline WriteExtentReq(const WriteExtentReq& from) : WriteExtentReq(nullptr, from) {}
  inline WriteExtentReq(WriteExtentReq&& from) noexcept
      : WriteExtentReq(nullptr, std::move(from)) {}
  inline WriteExtentReq& operator=(const WriteExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteExtentReq& operator=(WriteExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteExtentReq* internal_default_instance() {
    return reinterpret_cast<const WriteExtentReq*>(
        &_WriteExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WriteExtentReq& a, WriteExtentReq& b) { a.Swap(&b); }
  inline void Swap(WriteExtentReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteExtentReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteExtentReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<WriteExtentReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WriteExtentReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WriteExtentReq& from) { WriteExtentReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WriteExtentReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.WriteExtentReq"; }

 protected:
  explicit WriteExtentReq(::google::protobuf::Arena* arena);
  WriteExtentReq(::google::protobuf::Arena* arena, const WriteExtentReq& from);
  WriteExtentReq(::google::protobuf::Arena* arena, WriteExtentReq&& from) noexcept
      : WriteExtentReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kOffFieldNumber = 4,
    kLenFieldNumber = 5,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id() ;
  const std::string& extent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extent_id(Arg_&& arg, Args_... args);
  std::string* mutable_extent_id();
  PROTOBUF_NODISCARD std::string* release_extent_id();
  void set_allocated_extent_id(std::string* value);

  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(
      const std::string& value);
  std::string* _internal_mutable_extent_id();

  public:
  // .snail.stream.CommonReq base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonReq& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonReq* release_base();
  ::snail::stream::CommonReq* mutable_base();
  void set_allocated_base(::snail::stream::CommonReq* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonReq* value);
  ::snail::stream::CommonReq* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonReq& _internal_base() const;
  ::snail::stream::CommonReq* _internal_mutable_base();

  public:
  // uint64 off = 4;
  void clear_off() ;
  ::uint64_t off() const;
  void set_off(::uint64_t value);

  private:
  ::uint64_t _internal_off() const;
  void _internal_set_off(::uint64_t value);

  public:
  // uint64 len = 5;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // uint32 diskid = 2;
  void clear_diskid() ;
  ::uint32_t diskid() const;
  void set_diskid(::uint32_t value);

  private:
  ::uint32_t _internal_diskid() const;
  void _internal_set_diskid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.WriteExtentReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extent_id_;
    ::snail::stream::CommonReq* base_;
    ::uint64_t off_;
    ::uint64_t len_;
    ::uint32_t diskid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class UpdateDiskStatusReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.UpdateDiskStatusReq) */ {
 public:
  inline UpdateDiskStatusReq() : UpdateDiskStatusReq(nullptr) {}
  ~UpdateDiskStatusReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateDiskStatusReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateDiskStatusReq(const UpdateDiskStatusReq& from) : UpdateDiskStatusReq(nullptr, from) {}
  inline UpdateDiskStatusReq(UpdateDiskStatusReq&& from) noexcept
      : UpdateDiskStatusReq(nullptr, std::move(from)) {}
  inline UpdateDiskStatusReq& operator=(const UpdateDiskStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDiskStatusReq& operator=(UpdateDiskStatusReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDiskStatusReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDiskStatusReq* internal_default_instance() {
    return reinterpret_cast<const UpdateDiskStatusReq*>(
        &_UpdateDiskStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(UpdateDiskStatusReq& a, UpdateDiskStatusReq& b) { a.Swap(&b); }
  inline void Swap(UpdateDiskStatusReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDiskStatusReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDiskStatusReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<UpdateDiskStatusReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateDiskStatusReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateDiskStatusReq& from) { UpdateDiskStatusReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateDiskStatusReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.UpdateDiskStatusReq"; }

 protected:
  explicit UpdateDiskStatusReq(::google::protobuf::Arena* arena);
  UpdateDiskStatusReq(::google::protobuf::Arena* arena, const UpdateDiskStatusReq& from);
  UpdateDiskStatusReq(::google::protobuf::Arena* arena, UpdateDiskStatusReq&& from) noexcept
      : UpdateDiskStatusReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();

  public:
  // uint32 diskid = 2;
  void clear_diskid() ;
  ::uint32_t diskid() const;
  void set_diskid(::uint32_t value);

  private:
  ::uint32_t _internal_diskid() const;
  void _internal_set_diskid(::uint32_t value);

  public:
  // uint32 status = 3;
  void clear_status() ;
  ::uint32_t status() const;
  void set_status(::uint32_t value);

  private:
  ::uint32_t _internal_status() const;
  void _internal_set_status(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.UpdateDiskStatusReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::snail::stream::CommonResp* base_;
    ::uint32_t diskid_;
    ::uint32_t status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class ReadExtentResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.ReadExtentResp) */ {
 public:
  inline ReadExtentResp() : ReadExtentResp(nullptr) {}
  ~ReadExtentResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReadExtentResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReadExtentResp(const ReadExtentResp& from) : ReadExtentResp(nullptr, from) {}
  inline ReadExtentResp(ReadExtentResp&& from) noexcept
      : ReadExtentResp(nullptr, std::move(from)) {}
  inline ReadExtentResp& operator=(const ReadExtentResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadExtentResp& operator=(ReadExtentResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadExtentResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadExtentResp* internal_default_instance() {
    return reinterpret_cast<const ReadExtentResp*>(
        &_ReadExtentResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ReadExtentResp& a, ReadExtentResp& b) { a.Swap(&b); }
  inline void Swap(ReadExtentResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadExtentResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadExtentResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReadExtentResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReadExtentResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReadExtentResp& from) { ReadExtentResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReadExtentResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.ReadExtentResp"; }

 protected:
  explicit ReadExtentResp(::google::protobuf::Arena* arena);
  ReadExtentResp(::google::protobuf::Arena* arena, const ReadExtentResp& from);
  ReadExtentResp(::google::protobuf::Arena* arena, ReadExtentResp&& from) noexcept
      : ReadExtentResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
    kLenFieldNumber = 2,
  };
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();

  public:
  // uint64 len = 2;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.ReadExtentResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::snail::stream::CommonResp* base_;
    ::uint64_t len_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class ReadExtentReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.ReadExtentReq) */ {
 public:
  inline ReadExtentReq() : ReadExtentReq(nullptr) {}
  ~ReadExtentReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReadExtentReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReadExtentReq(const ReadExtentReq& from) : ReadExtentReq(nullptr, from) {}
  inline ReadExtentReq(ReadExtentReq&& from) noexcept
      : ReadExtentReq(nullptr, std::move(from)) {}
  inline ReadExtentReq& operator=(const ReadExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadExtentReq& operator=(ReadExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadExtentReq* internal_default_instance() {
    return reinterpret_cast<const ReadExtentReq*>(
        &_ReadExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ReadExtentReq& a, ReadExtentReq& b) { a.Swap(&b); }
  inline void Swap(ReadExtentReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadExtentReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadExtentReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ReadExtentReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReadExtentReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReadExtentReq& from) { ReadExtentReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReadExtentReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.ReadExtentReq"; }

 protected:
  explicit ReadExtentReq(::google::protobuf::Arena* arena);
  ReadExtentReq(::google::protobuf::Arena* arena, const ReadExtentReq& from);
  ReadExtentReq(::google::protobuf::Arena* arena, ReadExtentReq&& from) noexcept
      : ReadExtentReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kOffFieldNumber = 4,
    kLenFieldNumber = 5,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id() ;
  const std::string& extent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extent_id(Arg_&& arg, Args_... args);
  std::string* mutable_extent_id();
  PROTOBUF_NODISCARD std::string* release_extent_id();
  void set_allocated_extent_id(std::string* value);

  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(
      const std::string& value);
  std::string* _internal_mutable_extent_id();

  public:
  // .snail.stream.CommonReq base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonReq& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonReq* release_base();
  ::snail::stream::CommonReq* mutable_base();
  void set_allocated_base(::snail::stream::CommonReq* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonReq* value);
  ::snail::stream::CommonReq* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonReq& _internal_base() const;
  ::snail::stream::CommonReq* _internal_mutable_base();

  public:
  // uint64 off = 4;
  void clear_off() ;
  ::uint64_t off() const;
  void set_off(::uint64_t value);

  private:
  ::uint64_t _internal_off() const;
  void _internal_set_off(::uint64_t value);

  public:
  // uint64 len = 5;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // uint32 diskid = 2;
  void clear_diskid() ;
  ::uint32_t diskid() const;
  void set_diskid(::uint32_t value);

  private:
  ::uint32_t _internal_diskid() const;
  void _internal_set_diskid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.ReadExtentReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extent_id_;
    ::snail::stream::CommonReq* base_;
    ::uint64_t off_;
    ::uint64_t len_;
    ::uint32_t diskid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class GetExtentResp final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.GetExtentResp) */ {
 public:
  inline GetExtentResp() : GetExtentResp(nullptr) {}
  ~GetExtentResp() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetExtentResp(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetExtentResp(const GetExtentResp& from) : GetExtentResp(nullptr, from) {}
  inline GetExtentResp(GetExtentResp&& from) noexcept
      : GetExtentResp(nullptr, std::move(from)) {}
  inline GetExtentResp& operator=(const GetExtentResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExtentResp& operator=(GetExtentResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetExtentResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetExtentResp* internal_default_instance() {
    return reinterpret_cast<const GetExtentResp*>(
        &_GetExtentResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GetExtentResp& a, GetExtentResp& b) { a.Swap(&b); }
  inline void Swap(GetExtentResp* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExtentResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetExtentResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetExtentResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetExtentResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetExtentResp& from) { GetExtentResp::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetExtentResp* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.GetExtentResp"; }

 protected:
  explicit GetExtentResp(::google::protobuf::Arena* arena);
  GetExtentResp(::google::protobuf::Arena* arena, const GetExtentResp& from);
  GetExtentResp(::google::protobuf::Arena* arena, GetExtentResp&& from) noexcept
      : GetExtentResp(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
    kLenFieldNumber = 2,
    kCtimeFieldNumber = 3,
  };
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();

  public:
  // uint64 len = 2;
  void clear_len() ;
  ::uint64_t len() const;
  void set_len(::uint64_t value);

  private:
  ::uint64_t _internal_len() const;
  void _internal_set_len(::uint64_t value);

  public:
  // uint32 ctime = 3;
  void clear_ctime() ;
  ::uint32_t ctime() const;
  void set_ctime(::uint32_t value);

  private:
  ::uint32_t _internal_ctime() const;
  void _internal_set_ctime(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.GetExtentResp)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::snail::stream::CommonResp* base_;
    ::uint64_t len_;
    ::uint32_t ctime_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class GetExtentReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.GetExtentReq) */ {
 public:
  inline GetExtentReq() : GetExtentReq(nullptr) {}
  ~GetExtentReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetExtentReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetExtentReq(const GetExtentReq& from) : GetExtentReq(nullptr, from) {}
  inline GetExtentReq(GetExtentReq&& from) noexcept
      : GetExtentReq(nullptr, std::move(from)) {}
  inline GetExtentReq& operator=(const GetExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExtentReq& operator=(GetExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetExtentReq* internal_default_instance() {
    return reinterpret_cast<const GetExtentReq*>(
        &_GetExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetExtentReq& a, GetExtentReq& b) { a.Swap(&b); }
  inline void Swap(GetExtentReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExtentReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetExtentReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetExtentReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetExtentReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetExtentReq& from) { GetExtentReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetExtentReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.GetExtentReq"; }

 protected:
  explicit GetExtentReq(::google::protobuf::Arena* arena);
  GetExtentReq(::google::protobuf::Arena* arena, const GetExtentReq& from);
  GetExtentReq(::google::protobuf::Arena* arena, GetExtentReq&& from) noexcept
      : GetExtentReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id() ;
  const std::string& extent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extent_id(Arg_&& arg, Args_... args);
  std::string* mutable_extent_id();
  PROTOBUF_NODISCARD std::string* release_extent_id();
  void set_allocated_extent_id(std::string* value);

  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(
      const std::string& value);
  std::string* _internal_mutable_extent_id();

  public:
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();

  public:
  // uint32 diskid = 2;
  void clear_diskid() ;
  ::uint32_t diskid() const;
  void set_diskid(::uint32_t value);

  private:
  ::uint32_t _internal_diskid() const;
  void _internal_set_diskid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.GetExtentReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extent_id_;
    ::snail::stream::CommonResp* base_;
    ::uint32_t diskid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class DeleteExtentReq final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:snail.stream.DeleteExtentReq) */ {
 public:
  inline DeleteExtentReq() : DeleteExtentReq(nullptr) {}
  ~DeleteExtentReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteExtentReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteExtentReq(const DeleteExtentReq& from) : DeleteExtentReq(nullptr, from) {}
  inline DeleteExtentReq(DeleteExtentReq&& from) noexcept
      : DeleteExtentReq(nullptr, std::move(from)) {}
  inline DeleteExtentReq& operator=(const DeleteExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteExtentReq& operator=(DeleteExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteExtentReq* internal_default_instance() {
    return reinterpret_cast<const DeleteExtentReq*>(
        &_DeleteExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(DeleteExtentReq& a, DeleteExtentReq& b) { a.Swap(&b); }
  inline void Swap(DeleteExtentReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteExtentReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteExtentReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeleteExtentReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteExtentReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteExtentReq& from) { DeleteExtentReq::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteExtentReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "snail.stream.DeleteExtentReq"; }

 protected:
  explicit DeleteExtentReq(::google::protobuf::Arena* arena);
  DeleteExtentReq(::google::protobuf::Arena* arena, const DeleteExtentReq& from);
  DeleteExtentReq(::google::protobuf::Arena* arena, DeleteExtentReq&& from) noexcept
      : DeleteExtentReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id() ;
  const std::string& extent_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_extent_id(Arg_&& arg, Args_... args);
  std::string* mutable_extent_id();
  PROTOBUF_NODISCARD std::string* release_extent_id();
  void set_allocated_extent_id(std::string* value);

  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(
      const std::string& value);
  std::string* _internal_mutable_extent_id();

  public:
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_NODISCARD ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* value);
  void unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();

  public:
  // uint32 diskid = 2;
  void clear_diskid() ;
  ::uint32_t diskid() const;
  void set_diskid(::uint32_t value);

  private:
  ::uint32_t _internal_diskid() const;
  void _internal_set_diskid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:snail.stream.DeleteExtentReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr extent_id_;
    ::snail::stream::CommonResp* base_;
    ::uint32_t diskid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WriteExtentReq

// .snail.stream.CommonReq base = 1;
inline bool WriteExtentReq::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonReq& WriteExtentReq::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonReq* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonReq&>(::snail::stream::_CommonReq_default_instance_);
}
inline const ::snail::stream::CommonReq& WriteExtentReq::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.base)
  return _internal_base();
}
inline void WriteExtentReq::unsafe_arena_set_allocated_base(::snail::stream::CommonReq* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonReq*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.WriteExtentReq.base)
}
inline ::snail::stream::CommonReq* WriteExtentReq::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonReq* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonReq* WriteExtentReq::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.WriteExtentReq.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonReq* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonReq* WriteExtentReq::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonReq>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonReq*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonReq* WriteExtentReq::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonReq* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.WriteExtentReq.base)
  return _msg;
}
inline void WriteExtentReq::set_allocated_base(::snail::stream::CommonReq* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonReq*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.WriteExtentReq.base)
}

// uint32 diskid = 2;
inline void WriteExtentReq::clear_diskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = 0u;
}
inline ::uint32_t WriteExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.diskid)
  return _internal_diskid();
}
inline void WriteExtentReq::set_diskid(::uint32_t value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.diskid)
}
inline ::uint32_t WriteExtentReq::_internal_diskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diskid_;
}
inline void WriteExtentReq::_internal_set_diskid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = value;
}

// string extent_id = 3;
inline void WriteExtentReq::clear_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.ClearToEmpty();
}
inline const std::string& WriteExtentReq::extent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WriteExtentReq::set_extent_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.extent_id)
}
inline std::string* WriteExtentReq::mutable_extent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.WriteExtentReq.extent_id)
  return _s;
}
inline const std::string& WriteExtentReq::_internal_extent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Get();
}
inline void WriteExtentReq::_internal_set_extent_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(value, GetArena());
}
inline std::string* WriteExtentReq::_internal_mutable_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Mutable( GetArena());
}
inline std::string* WriteExtentReq::release_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.WriteExtentReq.extent_id)
  return _impl_.extent_id_.Release();
}
inline void WriteExtentReq::set_allocated_extent_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.extent_id_.IsDefault()) {
          _impl_.extent_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.WriteExtentReq.extent_id)
}

// uint64 off = 4;
inline void WriteExtentReq::clear_off() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.off_ = ::uint64_t{0u};
}
inline ::uint64_t WriteExtentReq::off() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.off)
  return _internal_off();
}
inline void WriteExtentReq::set_off(::uint64_t value) {
  _internal_set_off(value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.off)
}
inline ::uint64_t WriteExtentReq::_internal_off() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.off_;
}
inline void WriteExtentReq::_internal_set_off(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.off_ = value;
}

// uint64 len = 5;
inline void WriteExtentReq::clear_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = ::uint64_t{0u};
}
inline ::uint64_t WriteExtentReq::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.len)
  return _internal_len();
}
inline void WriteExtentReq::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.len)
}
inline ::uint64_t WriteExtentReq::_internal_len() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.len_;
}
inline void WriteExtentReq::_internal_set_len(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// ReadExtentReq

// .snail.stream.CommonReq base = 1;
inline bool ReadExtentReq::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonReq& ReadExtentReq::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonReq* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonReq&>(::snail::stream::_CommonReq_default_instance_);
}
inline const ::snail::stream::CommonReq& ReadExtentReq::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.base)
  return _internal_base();
}
inline void ReadExtentReq::unsafe_arena_set_allocated_base(::snail::stream::CommonReq* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonReq*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.ReadExtentReq.base)
}
inline ::snail::stream::CommonReq* ReadExtentReq::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonReq* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonReq* ReadExtentReq::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentReq.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonReq* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonReq* ReadExtentReq::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonReq>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonReq*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonReq* ReadExtentReq::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonReq* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentReq.base)
  return _msg;
}
inline void ReadExtentReq::set_allocated_base(::snail::stream::CommonReq* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonReq*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentReq.base)
}

// uint32 diskid = 2;
inline void ReadExtentReq::clear_diskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = 0u;
}
inline ::uint32_t ReadExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.diskid)
  return _internal_diskid();
}
inline void ReadExtentReq::set_diskid(::uint32_t value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.diskid)
}
inline ::uint32_t ReadExtentReq::_internal_diskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diskid_;
}
inline void ReadExtentReq::_internal_set_diskid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = value;
}

// string extent_id = 3;
inline void ReadExtentReq::clear_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.ClearToEmpty();
}
inline const std::string& ReadExtentReq::extent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadExtentReq::set_extent_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.extent_id)
}
inline std::string* ReadExtentReq::mutable_extent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentReq.extent_id)
  return _s;
}
inline const std::string& ReadExtentReq::_internal_extent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Get();
}
inline void ReadExtentReq::_internal_set_extent_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(value, GetArena());
}
inline std::string* ReadExtentReq::_internal_mutable_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Mutable( GetArena());
}
inline std::string* ReadExtentReq::release_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentReq.extent_id)
  return _impl_.extent_id_.Release();
}
inline void ReadExtentReq::set_allocated_extent_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.extent_id_.IsDefault()) {
          _impl_.extent_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentReq.extent_id)
}

// uint64 off = 4;
inline void ReadExtentReq::clear_off() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.off_ = ::uint64_t{0u};
}
inline ::uint64_t ReadExtentReq::off() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.off)
  return _internal_off();
}
inline void ReadExtentReq::set_off(::uint64_t value) {
  _internal_set_off(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.off)
}
inline ::uint64_t ReadExtentReq::_internal_off() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.off_;
}
inline void ReadExtentReq::_internal_set_off(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.off_ = value;
}

// uint64 len = 5;
inline void ReadExtentReq::clear_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = ::uint64_t{0u};
}
inline ::uint64_t ReadExtentReq::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.len)
  return _internal_len();
}
inline void ReadExtentReq::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.len)
}
inline ::uint64_t ReadExtentReq::_internal_len() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.len_;
}
inline void ReadExtentReq::_internal_set_len(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// ReadExtentResp

// .snail.stream.CommonResp base = 1;
inline bool ReadExtentResp::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonResp& ReadExtentResp::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonResp* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& ReadExtentResp::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentResp.base)
  return _internal_base();
}
inline void ReadExtentResp::unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.ReadExtentResp.base)
}
inline ::snail::stream::CommonResp* ReadExtentResp::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonResp* ReadExtentResp::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentResp.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* ReadExtentResp::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonResp>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonResp* ReadExtentResp::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentResp.base)
  return _msg;
}
inline void ReadExtentResp::set_allocated_base(::snail::stream::CommonResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentResp.base)
}

// uint64 len = 2;
inline void ReadExtentResp::clear_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = ::uint64_t{0u};
}
inline ::uint64_t ReadExtentResp::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentResp.len)
  return _internal_len();
}
inline void ReadExtentResp::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentResp.len)
}
inline ::uint64_t ReadExtentResp::_internal_len() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.len_;
}
inline void ReadExtentResp::_internal_set_len(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = value;
}

// -------------------------------------------------------------------

// DeleteExtentReq

// .snail.stream.CommonResp base = 1;
inline bool DeleteExtentReq::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonResp& DeleteExtentReq::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonResp* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& DeleteExtentReq::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.base)
  return _internal_base();
}
inline void DeleteExtentReq::unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.DeleteExtentReq.base)
}
inline ::snail::stream::CommonResp* DeleteExtentReq::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.DeleteExtentReq.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonResp>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.DeleteExtentReq.base)
  return _msg;
}
inline void DeleteExtentReq::set_allocated_base(::snail::stream::CommonResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.DeleteExtentReq.base)
}

// uint32 diskid = 2;
inline void DeleteExtentReq::clear_diskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = 0u;
}
inline ::uint32_t DeleteExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.diskid)
  return _internal_diskid();
}
inline void DeleteExtentReq::set_diskid(::uint32_t value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.DeleteExtentReq.diskid)
}
inline ::uint32_t DeleteExtentReq::_internal_diskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diskid_;
}
inline void DeleteExtentReq::_internal_set_diskid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = value;
}

// string extent_id = 3;
inline void DeleteExtentReq::clear_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.ClearToEmpty();
}
inline const std::string& DeleteExtentReq::extent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteExtentReq::set_extent_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snail.stream.DeleteExtentReq.extent_id)
}
inline std::string* DeleteExtentReq::mutable_extent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.DeleteExtentReq.extent_id)
  return _s;
}
inline const std::string& DeleteExtentReq::_internal_extent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Get();
}
inline void DeleteExtentReq::_internal_set_extent_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(value, GetArena());
}
inline std::string* DeleteExtentReq::_internal_mutable_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Mutable( GetArena());
}
inline std::string* DeleteExtentReq::release_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.DeleteExtentReq.extent_id)
  return _impl_.extent_id_.Release();
}
inline void DeleteExtentReq::set_allocated_extent_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.extent_id_.IsDefault()) {
          _impl_.extent_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.DeleteExtentReq.extent_id)
}

// -------------------------------------------------------------------

// GetExtentReq

// .snail.stream.CommonResp base = 1;
inline bool GetExtentReq::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonResp& GetExtentReq::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonResp* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& GetExtentReq::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.base)
  return _internal_base();
}
inline void GetExtentReq::unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.GetExtentReq.base)
}
inline ::snail::stream::CommonResp* GetExtentReq::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonResp* GetExtentReq::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentReq.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentReq::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonResp>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonResp* GetExtentReq::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentReq.base)
  return _msg;
}
inline void GetExtentReq::set_allocated_base(::snail::stream::CommonResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentReq.base)
}

// uint32 diskid = 2;
inline void GetExtentReq::clear_diskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = 0u;
}
inline ::uint32_t GetExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.diskid)
  return _internal_diskid();
}
inline void GetExtentReq::set_diskid(::uint32_t value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentReq.diskid)
}
inline ::uint32_t GetExtentReq::_internal_diskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diskid_;
}
inline void GetExtentReq::_internal_set_diskid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = value;
}

// string extent_id = 3;
inline void GetExtentReq::clear_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.ClearToEmpty();
}
inline const std::string& GetExtentReq::extent_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetExtentReq::set_extent_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentReq.extent_id)
}
inline std::string* GetExtentReq::mutable_extent_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentReq.extent_id)
  return _s;
}
inline const std::string& GetExtentReq::_internal_extent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Get();
}
inline void GetExtentReq::_internal_set_extent_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.Set(value, GetArena());
}
inline std::string* GetExtentReq::_internal_mutable_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.extent_id_.Mutable( GetArena());
}
inline std::string* GetExtentReq::release_extent_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentReq.extent_id)
  return _impl_.extent_id_.Release();
}
inline void GetExtentReq::set_allocated_extent_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extent_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.extent_id_.IsDefault()) {
          _impl_.extent_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentReq.extent_id)
}

// -------------------------------------------------------------------

// GetExtentResp

// .snail.stream.CommonResp base = 1;
inline bool GetExtentResp::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonResp& GetExtentResp::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonResp* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& GetExtentResp::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.base)
  return _internal_base();
}
inline void GetExtentResp::unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.GetExtentResp.base)
}
inline ::snail::stream::CommonResp* GetExtentResp::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonResp* GetExtentResp::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentResp.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentResp::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonResp>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonResp* GetExtentResp::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentResp.base)
  return _msg;
}
inline void GetExtentResp::set_allocated_base(::snail::stream::CommonResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentResp.base)
}

// uint64 len = 2;
inline void GetExtentResp::clear_len() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = ::uint64_t{0u};
}
inline ::uint64_t GetExtentResp::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.len)
  return _internal_len();
}
inline void GetExtentResp::set_len(::uint64_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentResp.len)
}
inline ::uint64_t GetExtentResp::_internal_len() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.len_;
}
inline void GetExtentResp::_internal_set_len(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.len_ = value;
}

// uint32 ctime = 3;
inline void GetExtentResp::clear_ctime() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ctime_ = 0u;
}
inline ::uint32_t GetExtentResp::ctime() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.ctime)
  return _internal_ctime();
}
inline void GetExtentResp::set_ctime(::uint32_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentResp.ctime)
}
inline ::uint32_t GetExtentResp::_internal_ctime() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ctime_;
}
inline void GetExtentResp::_internal_set_ctime(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ctime_ = value;
}

// -------------------------------------------------------------------

// UpdateDiskStatusReq

// .snail.stream.CommonResp base = 1;
inline bool UpdateDiskStatusReq::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::snail::stream::CommonResp& UpdateDiskStatusReq::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::snail::stream::CommonResp* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& UpdateDiskStatusReq::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.base)
  return _internal_base();
}
inline void UpdateDiskStatusReq::unsafe_arena_set_allocated_base(::snail::stream::CommonResp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.UpdateDiskStatusReq.base)
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::unsafe_arena_release_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:snail.stream.UpdateDiskStatusReq.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::snail::stream::CommonResp* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::_internal_mutable_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::snail::stream::CommonResp>(GetArena());
    _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(p);
  }
  return _impl_.base_;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.UpdateDiskStatusReq.base)
  return _msg;
}
inline void UpdateDiskStatusReq::set_allocated_base(::snail::stream::CommonResp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::snail::stream::CommonResp*>(value);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.UpdateDiskStatusReq.base)
}

// uint32 diskid = 2;
inline void UpdateDiskStatusReq::clear_diskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = 0u;
}
inline ::uint32_t UpdateDiskStatusReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.diskid)
  return _internal_diskid();
}
inline void UpdateDiskStatusReq::set_diskid(::uint32_t value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.UpdateDiskStatusReq.diskid)
}
inline ::uint32_t UpdateDiskStatusReq::_internal_diskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diskid_;
}
inline void UpdateDiskStatusReq::_internal_set_diskid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diskid_ = value;
}

// uint32 status = 3;
inline void UpdateDiskStatusReq::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0u;
}
inline ::uint32_t UpdateDiskStatusReq::status() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.status)
  return _internal_status();
}
inline void UpdateDiskStatusReq::set_status(::uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:snail.stream.UpdateDiskStatusReq.status)
}
inline ::uint32_t UpdateDiskStatusReq::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void UpdateDiskStatusReq::_internal_set_status(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace stream
}  // namespace snail


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::snail::stream::DatanodeMsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::snail::stream::DatanodeMsgType>() {
  return ::snail::stream::DatanodeMsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_datanode_2eproto_2epb_2eh
