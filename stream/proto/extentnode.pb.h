// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extentnode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extentnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extentnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extentnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extentnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extentnode_2eproto;
namespace snail {
namespace stream {
class CreateExtentReq;
struct CreateExtentReqDefaultTypeInternal;
extern CreateExtentReqDefaultTypeInternal _CreateExtentReq_default_instance_;
class DeleteExtentReq;
struct DeleteExtentReqDefaultTypeInternal;
extern DeleteExtentReqDefaultTypeInternal _DeleteExtentReq_default_instance_;
class GetExtentReq;
struct GetExtentReqDefaultTypeInternal;
extern GetExtentReqDefaultTypeInternal _GetExtentReq_default_instance_;
class GetExtentResp;
struct GetExtentRespDefaultTypeInternal;
extern GetExtentRespDefaultTypeInternal _GetExtentResp_default_instance_;
class ReadExtentReq;
struct ReadExtentReqDefaultTypeInternal;
extern ReadExtentReqDefaultTypeInternal _ReadExtentReq_default_instance_;
class ReadExtentResp;
struct ReadExtentRespDefaultTypeInternal;
extern ReadExtentRespDefaultTypeInternal _ReadExtentResp_default_instance_;
class UpdateDiskStatusReq;
struct UpdateDiskStatusReqDefaultTypeInternal;
extern UpdateDiskStatusReqDefaultTypeInternal _UpdateDiskStatusReq_default_instance_;
class WriteExtentReq;
struct WriteExtentReqDefaultTypeInternal;
extern WriteExtentReqDefaultTypeInternal _WriteExtentReq_default_instance_;
}  // namespace stream
}  // namespace snail
PROTOBUF_NAMESPACE_OPEN
template<> ::snail::stream::CreateExtentReq* Arena::CreateMaybeMessage<::snail::stream::CreateExtentReq>(Arena*);
template<> ::snail::stream::DeleteExtentReq* Arena::CreateMaybeMessage<::snail::stream::DeleteExtentReq>(Arena*);
template<> ::snail::stream::GetExtentReq* Arena::CreateMaybeMessage<::snail::stream::GetExtentReq>(Arena*);
template<> ::snail::stream::GetExtentResp* Arena::CreateMaybeMessage<::snail::stream::GetExtentResp>(Arena*);
template<> ::snail::stream::ReadExtentReq* Arena::CreateMaybeMessage<::snail::stream::ReadExtentReq>(Arena*);
template<> ::snail::stream::ReadExtentResp* Arena::CreateMaybeMessage<::snail::stream::ReadExtentResp>(Arena*);
template<> ::snail::stream::UpdateDiskStatusReq* Arena::CreateMaybeMessage<::snail::stream::UpdateDiskStatusReq>(Arena*);
template<> ::snail::stream::WriteExtentReq* Arena::CreateMaybeMessage<::snail::stream::WriteExtentReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snail {
namespace stream {

enum ExtentnodeMsgType : int {
  WRITE_EXTENT_REQ = 0,
  WRITE_EXTENT_RESP = 1,
  READ_EXTENT_REQ = 2,
  READ_EXTENT_RESP = 3,
  CREATE_EXTENT_REQ = 4,
  CREATE_EXTENT_RESP = 5,
  DELETE_EXTENT_REQ = 6,
  DELETE_EXTENT_RESP = 7,
  GET_EXTENT_REQ = 8,
  GET_EXTENT_RESP = 9,
  UPDATE_DISK_STATUS_REQ = 10,
  UPDATE_DISK_STATUS_RESP = 11,
  ExtentnodeMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExtentnodeMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExtentnodeMsgType_IsValid(int value);
constexpr ExtentnodeMsgType ExtentnodeMsgType_MIN = WRITE_EXTENT_REQ;
constexpr ExtentnodeMsgType ExtentnodeMsgType_MAX = UPDATE_DISK_STATUS_RESP;
constexpr int ExtentnodeMsgType_ARRAYSIZE = ExtentnodeMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtentnodeMsgType_descriptor();
template<typename T>
inline const std::string& ExtentnodeMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtentnodeMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtentnodeMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExtentnodeMsgType_descriptor(), enum_t_value);
}
inline bool ExtentnodeMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExtentnodeMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExtentnodeMsgType>(
    ExtentnodeMsgType_descriptor(), name, value);
}
// ===================================================================

class WriteExtentReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.WriteExtentReq) */ {
 public:
  inline WriteExtentReq() : WriteExtentReq(nullptr) {}
  ~WriteExtentReq() override;
  explicit constexpr WriteExtentReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteExtentReq(const WriteExtentReq& from);
  WriteExtentReq(WriteExtentReq&& from) noexcept
    : WriteExtentReq() {
    *this = ::std::move(from);
  }

  inline WriteExtentReq& operator=(const WriteExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteExtentReq& operator=(WriteExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteExtentReq* internal_default_instance() {
    return reinterpret_cast<const WriteExtentReq*>(
               &_WriteExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WriteExtentReq& a, WriteExtentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteExtentReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteExtentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteExtentReq* New() const final {
    return new WriteExtentReq();
  }

  WriteExtentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteExtentReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteExtentReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteExtentReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteExtentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.WriteExtentReq";
  }
  protected:
  explicit WriteExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kOffFieldNumber = 4,
    kLenFieldNumber = 5,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id();
  const std::string& extent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_extent_id();
  void set_allocated_extent_id(std::string* extent_id);
  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(const std::string& value);
  std::string* _internal_mutable_extent_id();
  public:

  // .snail.stream.CommonReq base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonReq& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonReq* release_base();
  ::snail::stream::CommonReq* mutable_base();
  void set_allocated_base(::snail::stream::CommonReq* base);
  private:
  const ::snail::stream::CommonReq& _internal_base() const;
  ::snail::stream::CommonReq* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonReq* base);
  ::snail::stream::CommonReq* unsafe_arena_release_base();

  // uint64 off = 4;
  void clear_off();
  ::PROTOBUF_NAMESPACE_ID::uint64 off() const;
  void set_off(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_off() const;
  void _internal_set_off(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 len = 5;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 diskid = 2;
  void clear_diskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid() const;
  void set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_diskid() const;
  void _internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.WriteExtentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonReq* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 off_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class ReadExtentReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.ReadExtentReq) */ {
 public:
  inline ReadExtentReq() : ReadExtentReq(nullptr) {}
  ~ReadExtentReq() override;
  explicit constexpr ReadExtentReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadExtentReq(const ReadExtentReq& from);
  ReadExtentReq(ReadExtentReq&& from) noexcept
    : ReadExtentReq() {
    *this = ::std::move(from);
  }

  inline ReadExtentReq& operator=(const ReadExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadExtentReq& operator=(ReadExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadExtentReq* internal_default_instance() {
    return reinterpret_cast<const ReadExtentReq*>(
               &_ReadExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadExtentReq& a, ReadExtentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadExtentReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadExtentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadExtentReq* New() const final {
    return new ReadExtentReq();
  }

  ReadExtentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadExtentReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadExtentReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadExtentReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadExtentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.ReadExtentReq";
  }
  protected:
  explicit ReadExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kOffFieldNumber = 4,
    kLenFieldNumber = 5,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id();
  const std::string& extent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_extent_id();
  void set_allocated_extent_id(std::string* extent_id);
  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(const std::string& value);
  std::string* _internal_mutable_extent_id();
  public:

  // .snail.stream.CommonReq base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonReq& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonReq* release_base();
  ::snail::stream::CommonReq* mutable_base();
  void set_allocated_base(::snail::stream::CommonReq* base);
  private:
  const ::snail::stream::CommonReq& _internal_base() const;
  ::snail::stream::CommonReq* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonReq* base);
  ::snail::stream::CommonReq* unsafe_arena_release_base();

  // uint64 off = 4;
  void clear_off();
  ::PROTOBUF_NAMESPACE_ID::uint64 off() const;
  void set_off(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_off() const;
  void _internal_set_off(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 len = 5;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 diskid = 2;
  void clear_diskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid() const;
  void set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_diskid() const;
  void _internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.ReadExtentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonReq* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 off_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class ReadExtentResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.ReadExtentResp) */ {
 public:
  inline ReadExtentResp() : ReadExtentResp(nullptr) {}
  ~ReadExtentResp() override;
  explicit constexpr ReadExtentResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadExtentResp(const ReadExtentResp& from);
  ReadExtentResp(ReadExtentResp&& from) noexcept
    : ReadExtentResp() {
    *this = ::std::move(from);
  }

  inline ReadExtentResp& operator=(const ReadExtentResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadExtentResp& operator=(ReadExtentResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadExtentResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadExtentResp* internal_default_instance() {
    return reinterpret_cast<const ReadExtentResp*>(
               &_ReadExtentResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadExtentResp& a, ReadExtentResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadExtentResp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadExtentResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadExtentResp* New() const final {
    return new ReadExtentResp();
  }

  ReadExtentResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadExtentResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadExtentResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadExtentResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadExtentResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.ReadExtentResp";
  }
  protected:
  explicit ReadExtentResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kLenFieldNumber = 2,
  };
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonResp* base);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  // uint64 len = 2;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.ReadExtentResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::snail::stream::CommonResp* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class DeleteExtentReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.DeleteExtentReq) */ {
 public:
  inline DeleteExtentReq() : DeleteExtentReq(nullptr) {}
  ~DeleteExtentReq() override;
  explicit constexpr DeleteExtentReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteExtentReq(const DeleteExtentReq& from);
  DeleteExtentReq(DeleteExtentReq&& from) noexcept
    : DeleteExtentReq() {
    *this = ::std::move(from);
  }

  inline DeleteExtentReq& operator=(const DeleteExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteExtentReq& operator=(DeleteExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteExtentReq* internal_default_instance() {
    return reinterpret_cast<const DeleteExtentReq*>(
               &_DeleteExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteExtentReq& a, DeleteExtentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteExtentReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteExtentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteExtentReq* New() const final {
    return new DeleteExtentReq();
  }

  DeleteExtentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteExtentReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteExtentReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteExtentReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteExtentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.DeleteExtentReq";
  }
  protected:
  explicit DeleteExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id();
  const std::string& extent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_extent_id();
  void set_allocated_extent_id(std::string* extent_id);
  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(const std::string& value);
  std::string* _internal_mutable_extent_id();
  public:

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonResp* base);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  // uint32 diskid = 2;
  void clear_diskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid() const;
  void set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_diskid() const;
  void _internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.DeleteExtentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonResp* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class CreateExtentReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.CreateExtentReq) */ {
 public:
  inline CreateExtentReq() : CreateExtentReq(nullptr) {}
  ~CreateExtentReq() override;
  explicit constexpr CreateExtentReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateExtentReq(const CreateExtentReq& from);
  CreateExtentReq(CreateExtentReq&& from) noexcept
    : CreateExtentReq() {
    *this = ::std::move(from);
  }

  inline CreateExtentReq& operator=(const CreateExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateExtentReq& operator=(CreateExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateExtentReq* internal_default_instance() {
    return reinterpret_cast<const CreateExtentReq*>(
               &_CreateExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateExtentReq& a, CreateExtentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateExtentReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateExtentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateExtentReq* New() const final {
    return new CreateExtentReq();
  }

  CreateExtentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateExtentReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateExtentReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateExtentReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateExtentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.CreateExtentReq";
  }
  protected:
  explicit CreateExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id();
  const std::string& extent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_extent_id();
  void set_allocated_extent_id(std::string* extent_id);
  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(const std::string& value);
  std::string* _internal_mutable_extent_id();
  public:

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonResp* base);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  // uint32 diskid = 2;
  void clear_diskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid() const;
  void set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_diskid() const;
  void _internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.CreateExtentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonResp* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class GetExtentReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.GetExtentReq) */ {
 public:
  inline GetExtentReq() : GetExtentReq(nullptr) {}
  ~GetExtentReq() override;
  explicit constexpr GetExtentReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetExtentReq(const GetExtentReq& from);
  GetExtentReq(GetExtentReq&& from) noexcept
    : GetExtentReq() {
    *this = ::std::move(from);
  }

  inline GetExtentReq& operator=(const GetExtentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExtentReq& operator=(GetExtentReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetExtentReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetExtentReq* internal_default_instance() {
    return reinterpret_cast<const GetExtentReq*>(
               &_GetExtentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetExtentReq& a, GetExtentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetExtentReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExtentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetExtentReq* New() const final {
    return new GetExtentReq();
  }

  GetExtentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetExtentReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetExtentReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetExtentReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetExtentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.GetExtentReq";
  }
  protected:
  explicit GetExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentIdFieldNumber = 3,
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
  };
  // string extent_id = 3;
  void clear_extent_id();
  const std::string& extent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extent_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_extent_id();
  void set_allocated_extent_id(std::string* extent_id);
  private:
  const std::string& _internal_extent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extent_id(const std::string& value);
  std::string* _internal_mutable_extent_id();
  public:

  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonResp* base);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  // uint32 diskid = 2;
  void clear_diskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid() const;
  void set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_diskid() const;
  void _internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.GetExtentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extent_id_;
  ::snail::stream::CommonResp* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class GetExtentResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.GetExtentResp) */ {
 public:
  inline GetExtentResp() : GetExtentResp(nullptr) {}
  ~GetExtentResp() override;
  explicit constexpr GetExtentResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetExtentResp(const GetExtentResp& from);
  GetExtentResp(GetExtentResp&& from) noexcept
    : GetExtentResp() {
    *this = ::std::move(from);
  }

  inline GetExtentResp& operator=(const GetExtentResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExtentResp& operator=(GetExtentResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetExtentResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetExtentResp* internal_default_instance() {
    return reinterpret_cast<const GetExtentResp*>(
               &_GetExtentResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetExtentResp& a, GetExtentResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetExtentResp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExtentResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetExtentResp* New() const final {
    return new GetExtentResp();
  }

  GetExtentResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetExtentResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetExtentResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetExtentResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetExtentResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.GetExtentResp";
  }
  protected:
  explicit GetExtentResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kLenFieldNumber = 2,
    kCtimeFieldNumber = 3,
  };
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonResp* base);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  // uint64 len = 2;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ctime = 3;
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.GetExtentResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::snail::stream::CommonResp* base_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// -------------------------------------------------------------------

class UpdateDiskStatusReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.UpdateDiskStatusReq) */ {
 public:
  inline UpdateDiskStatusReq() : UpdateDiskStatusReq(nullptr) {}
  ~UpdateDiskStatusReq() override;
  explicit constexpr UpdateDiskStatusReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDiskStatusReq(const UpdateDiskStatusReq& from);
  UpdateDiskStatusReq(UpdateDiskStatusReq&& from) noexcept
    : UpdateDiskStatusReq() {
    *this = ::std::move(from);
  }

  inline UpdateDiskStatusReq& operator=(const UpdateDiskStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDiskStatusReq& operator=(UpdateDiskStatusReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDiskStatusReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDiskStatusReq* internal_default_instance() {
    return reinterpret_cast<const UpdateDiskStatusReq*>(
               &_UpdateDiskStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateDiskStatusReq& a, UpdateDiskStatusReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDiskStatusReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDiskStatusReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDiskStatusReq* New() const final {
    return new UpdateDiskStatusReq();
  }

  UpdateDiskStatusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDiskStatusReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDiskStatusReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateDiskStatusReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDiskStatusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.UpdateDiskStatusReq";
  }
  protected:
  explicit UpdateDiskStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kDiskidFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .snail.stream.CommonResp base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::snail::stream::CommonResp& base() const;
  PROTOBUF_MUST_USE_RESULT ::snail::stream::CommonResp* release_base();
  ::snail::stream::CommonResp* mutable_base();
  void set_allocated_base(::snail::stream::CommonResp* base);
  private:
  const ::snail::stream::CommonResp& _internal_base() const;
  ::snail::stream::CommonResp* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::snail::stream::CommonResp* base);
  ::snail::stream::CommonResp* unsafe_arena_release_base();

  // uint32 diskid = 2;
  void clear_diskid();
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid() const;
  void set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_diskid() const;
  void _internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 3;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.UpdateDiskStatusReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::snail::stream::CommonResp* base_;
  ::PROTOBUF_NAMESPACE_ID::uint32 diskid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extentnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteExtentReq

// .snail.stream.CommonReq base = 1;
inline bool WriteExtentReq::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool WriteExtentReq::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonReq& WriteExtentReq::_internal_base() const {
  const ::snail::stream::CommonReq* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonReq&>(
      ::snail::stream::_CommonReq_default_instance_);
}
inline const ::snail::stream::CommonReq& WriteExtentReq::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.base)
  return _internal_base();
}
inline void WriteExtentReq::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonReq* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.WriteExtentReq.base)
}
inline ::snail::stream::CommonReq* WriteExtentReq::release_base() {
  
  ::snail::stream::CommonReq* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonReq* WriteExtentReq::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.WriteExtentReq.base)
  
  ::snail::stream::CommonReq* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonReq* WriteExtentReq::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonReq>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonReq* WriteExtentReq::mutable_base() {
  ::snail::stream::CommonReq* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.WriteExtentReq.base)
  return _msg;
}
inline void WriteExtentReq::set_allocated_base(::snail::stream::CommonReq* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.WriteExtentReq.base)
}

// uint32 diskid = 2;
inline void WriteExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriteExtentReq::_internal_diskid() const {
  return diskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WriteExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.diskid)
  return _internal_diskid();
}
inline void WriteExtentReq::_internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  diskid_ = value;
}
inline void WriteExtentReq::set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.diskid)
}

// string extent_id = 3;
inline void WriteExtentReq::clear_extent_id() {
  extent_id_.ClearToEmpty();
}
inline const std::string& WriteExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteExtentReq::set_extent_id(ArgT0&& arg0, ArgT... args) {
 
 extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.extent_id)
}
inline std::string* WriteExtentReq::mutable_extent_id() {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.WriteExtentReq.extent_id)
  return _s;
}
inline const std::string& WriteExtentReq::_internal_extent_id() const {
  return extent_id_.Get();
}
inline void WriteExtentReq::_internal_set_extent_id(const std::string& value) {
  
  extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WriteExtentReq::_internal_mutable_extent_id() {
  
  return extent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WriteExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.WriteExtentReq.extent_id)
  return extent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WriteExtentReq::set_allocated_extent_id(std::string* extent_id) {
  if (extent_id != nullptr) {
    
  } else {
    
  }
  extent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snail.stream.WriteExtentReq.extent_id)
}

// uint64 off = 4;
inline void WriteExtentReq::clear_off() {
  off_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteExtentReq::_internal_off() const {
  return off_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteExtentReq::off() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.off)
  return _internal_off();
}
inline void WriteExtentReq::_internal_set_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  off_ = value;
}
inline void WriteExtentReq::set_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_off(value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.off)
}

// uint64 len = 5;
inline void WriteExtentReq::clear_len() {
  len_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteExtentReq::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteExtentReq::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.WriteExtentReq.len)
  return _internal_len();
}
inline void WriteExtentReq::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  len_ = value;
}
inline void WriteExtentReq::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.WriteExtentReq.len)
}

// -------------------------------------------------------------------

// ReadExtentReq

// .snail.stream.CommonReq base = 1;
inline bool ReadExtentReq::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ReadExtentReq::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonReq& ReadExtentReq::_internal_base() const {
  const ::snail::stream::CommonReq* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonReq&>(
      ::snail::stream::_CommonReq_default_instance_);
}
inline const ::snail::stream::CommonReq& ReadExtentReq::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.base)
  return _internal_base();
}
inline void ReadExtentReq::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonReq* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.ReadExtentReq.base)
}
inline ::snail::stream::CommonReq* ReadExtentReq::release_base() {
  
  ::snail::stream::CommonReq* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonReq* ReadExtentReq::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentReq.base)
  
  ::snail::stream::CommonReq* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonReq* ReadExtentReq::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonReq>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonReq* ReadExtentReq::mutable_base() {
  ::snail::stream::CommonReq* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentReq.base)
  return _msg;
}
inline void ReadExtentReq::set_allocated_base(::snail::stream::CommonReq* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentReq.base)
}

// uint32 diskid = 2;
inline void ReadExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadExtentReq::_internal_diskid() const {
  return diskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReadExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.diskid)
  return _internal_diskid();
}
inline void ReadExtentReq::_internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  diskid_ = value;
}
inline void ReadExtentReq::set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.diskid)
}

// string extent_id = 3;
inline void ReadExtentReq::clear_extent_id() {
  extent_id_.ClearToEmpty();
}
inline const std::string& ReadExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadExtentReq::set_extent_id(ArgT0&& arg0, ArgT... args) {
 
 extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.extent_id)
}
inline std::string* ReadExtentReq::mutable_extent_id() {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentReq.extent_id)
  return _s;
}
inline const std::string& ReadExtentReq::_internal_extent_id() const {
  return extent_id_.Get();
}
inline void ReadExtentReq::_internal_set_extent_id(const std::string& value) {
  
  extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadExtentReq::_internal_mutable_extent_id() {
  
  return extent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentReq.extent_id)
  return extent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadExtentReq::set_allocated_extent_id(std::string* extent_id) {
  if (extent_id != nullptr) {
    
  } else {
    
  }
  extent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentReq.extent_id)
}

// uint64 off = 4;
inline void ReadExtentReq::clear_off() {
  off_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadExtentReq::_internal_off() const {
  return off_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadExtentReq::off() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.off)
  return _internal_off();
}
inline void ReadExtentReq::_internal_set_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  off_ = value;
}
inline void ReadExtentReq::set_off(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_off(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.off)
}

// uint64 len = 5;
inline void ReadExtentReq::clear_len() {
  len_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadExtentReq::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadExtentReq::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentReq.len)
  return _internal_len();
}
inline void ReadExtentReq::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  len_ = value;
}
inline void ReadExtentReq::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentReq.len)
}

// -------------------------------------------------------------------

// ReadExtentResp

// .snail.stream.CommonResp base = 1;
inline bool ReadExtentResp::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool ReadExtentResp::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonResp& ReadExtentResp::_internal_base() const {
  const ::snail::stream::CommonResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(
      ::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& ReadExtentResp::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentResp.base)
  return _internal_base();
}
inline void ReadExtentResp::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.ReadExtentResp.base)
}
inline ::snail::stream::CommonResp* ReadExtentResp::release_base() {
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonResp* ReadExtentResp::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.ReadExtentResp.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* ReadExtentResp::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonResp* ReadExtentResp::mutable_base() {
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.ReadExtentResp.base)
  return _msg;
}
inline void ReadExtentResp::set_allocated_base(::snail::stream::CommonResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.ReadExtentResp.base)
}

// uint64 len = 2;
inline void ReadExtentResp::clear_len() {
  len_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadExtentResp::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadExtentResp::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.ReadExtentResp.len)
  return _internal_len();
}
inline void ReadExtentResp::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  len_ = value;
}
inline void ReadExtentResp::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.ReadExtentResp.len)
}

// -------------------------------------------------------------------

// DeleteExtentReq

// .snail.stream.CommonResp base = 1;
inline bool DeleteExtentReq::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool DeleteExtentReq::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonResp& DeleteExtentReq::_internal_base() const {
  const ::snail::stream::CommonResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(
      ::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& DeleteExtentReq::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.base)
  return _internal_base();
}
inline void DeleteExtentReq::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.DeleteExtentReq.base)
}
inline ::snail::stream::CommonResp* DeleteExtentReq::release_base() {
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.DeleteExtentReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonResp* DeleteExtentReq::mutable_base() {
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.DeleteExtentReq.base)
  return _msg;
}
inline void DeleteExtentReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.DeleteExtentReq.base)
}

// uint32 diskid = 2;
inline void DeleteExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteExtentReq::_internal_diskid() const {
  return diskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.diskid)
  return _internal_diskid();
}
inline void DeleteExtentReq::_internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  diskid_ = value;
}
inline void DeleteExtentReq::set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.DeleteExtentReq.diskid)
}

// string extent_id = 3;
inline void DeleteExtentReq::clear_extent_id() {
  extent_id_.ClearToEmpty();
}
inline const std::string& DeleteExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.DeleteExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteExtentReq::set_extent_id(ArgT0&& arg0, ArgT... args) {
 
 extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.DeleteExtentReq.extent_id)
}
inline std::string* DeleteExtentReq::mutable_extent_id() {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.DeleteExtentReq.extent_id)
  return _s;
}
inline const std::string& DeleteExtentReq::_internal_extent_id() const {
  return extent_id_.Get();
}
inline void DeleteExtentReq::_internal_set_extent_id(const std::string& value) {
  
  extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteExtentReq::_internal_mutable_extent_id() {
  
  return extent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.DeleteExtentReq.extent_id)
  return extent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteExtentReq::set_allocated_extent_id(std::string* extent_id) {
  if (extent_id != nullptr) {
    
  } else {
    
  }
  extent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snail.stream.DeleteExtentReq.extent_id)
}

// -------------------------------------------------------------------

// CreateExtentReq

// .snail.stream.CommonResp base = 1;
inline bool CreateExtentReq::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool CreateExtentReq::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonResp& CreateExtentReq::_internal_base() const {
  const ::snail::stream::CommonResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(
      ::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& CreateExtentReq::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.CreateExtentReq.base)
  return _internal_base();
}
inline void CreateExtentReq::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.CreateExtentReq.base)
}
inline ::snail::stream::CommonResp* CreateExtentReq::release_base() {
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonResp* CreateExtentReq::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.CreateExtentReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* CreateExtentReq::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonResp* CreateExtentReq::mutable_base() {
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.CreateExtentReq.base)
  return _msg;
}
inline void CreateExtentReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.CreateExtentReq.base)
}

// uint32 diskid = 2;
inline void CreateExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateExtentReq::_internal_diskid() const {
  return diskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.CreateExtentReq.diskid)
  return _internal_diskid();
}
inline void CreateExtentReq::_internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  diskid_ = value;
}
inline void CreateExtentReq::set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.CreateExtentReq.diskid)
}

// string extent_id = 3;
inline void CreateExtentReq::clear_extent_id() {
  extent_id_.ClearToEmpty();
}
inline const std::string& CreateExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.CreateExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateExtentReq::set_extent_id(ArgT0&& arg0, ArgT... args) {
 
 extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.CreateExtentReq.extent_id)
}
inline std::string* CreateExtentReq::mutable_extent_id() {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.CreateExtentReq.extent_id)
  return _s;
}
inline const std::string& CreateExtentReq::_internal_extent_id() const {
  return extent_id_.Get();
}
inline void CreateExtentReq::_internal_set_extent_id(const std::string& value) {
  
  extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateExtentReq::_internal_mutable_extent_id() {
  
  return extent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.CreateExtentReq.extent_id)
  return extent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateExtentReq::set_allocated_extent_id(std::string* extent_id) {
  if (extent_id != nullptr) {
    
  } else {
    
  }
  extent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snail.stream.CreateExtentReq.extent_id)
}

// -------------------------------------------------------------------

// GetExtentReq

// .snail.stream.CommonResp base = 1;
inline bool GetExtentReq::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool GetExtentReq::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonResp& GetExtentReq::_internal_base() const {
  const ::snail::stream::CommonResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(
      ::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& GetExtentReq::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.base)
  return _internal_base();
}
inline void GetExtentReq::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.GetExtentReq.base)
}
inline ::snail::stream::CommonResp* GetExtentReq::release_base() {
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentReq::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentReq::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonResp* GetExtentReq::mutable_base() {
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentReq.base)
  return _msg;
}
inline void GetExtentReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentReq.base)
}

// uint32 diskid = 2;
inline void GetExtentReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetExtentReq::_internal_diskid() const {
  return diskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetExtentReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.diskid)
  return _internal_diskid();
}
inline void GetExtentReq::_internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  diskid_ = value;
}
inline void GetExtentReq::set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentReq.diskid)
}

// string extent_id = 3;
inline void GetExtentReq::clear_extent_id() {
  extent_id_.ClearToEmpty();
}
inline const std::string& GetExtentReq::extent_id() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentReq.extent_id)
  return _internal_extent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetExtentReq::set_extent_id(ArgT0&& arg0, ArgT... args) {
 
 extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentReq.extent_id)
}
inline std::string* GetExtentReq::mutable_extent_id() {
  std::string* _s = _internal_mutable_extent_id();
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentReq.extent_id)
  return _s;
}
inline const std::string& GetExtentReq::_internal_extent_id() const {
  return extent_id_.Get();
}
inline void GetExtentReq::_internal_set_extent_id(const std::string& value) {
  
  extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetExtentReq::_internal_mutable_extent_id() {
  
  return extent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetExtentReq::release_extent_id() {
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentReq.extent_id)
  return extent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetExtentReq::set_allocated_extent_id(std::string* extent_id) {
  if (extent_id != nullptr) {
    
  } else {
    
  }
  extent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extent_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentReq.extent_id)
}

// -------------------------------------------------------------------

// GetExtentResp

// .snail.stream.CommonResp base = 1;
inline bool GetExtentResp::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool GetExtentResp::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonResp& GetExtentResp::_internal_base() const {
  const ::snail::stream::CommonResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(
      ::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& GetExtentResp::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.base)
  return _internal_base();
}
inline void GetExtentResp::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.GetExtentResp.base)
}
inline ::snail::stream::CommonResp* GetExtentResp::release_base() {
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentResp::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.GetExtentResp.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* GetExtentResp::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonResp* GetExtentResp::mutable_base() {
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.GetExtentResp.base)
  return _msg;
}
inline void GetExtentResp::set_allocated_base(::snail::stream::CommonResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.GetExtentResp.base)
}

// uint64 len = 2;
inline void GetExtentResp::clear_len() {
  len_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetExtentResp::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetExtentResp::len() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.len)
  return _internal_len();
}
inline void GetExtentResp::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  len_ = value;
}
inline void GetExtentResp::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentResp.len)
}

// uint32 ctime = 3;
inline void GetExtentResp::clear_ctime() {
  ctime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetExtentResp::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetExtentResp::ctime() const {
  // @@protoc_insertion_point(field_get:snail.stream.GetExtentResp.ctime)
  return _internal_ctime();
}
inline void GetExtentResp::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ctime_ = value;
}
inline void GetExtentResp::set_ctime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:snail.stream.GetExtentResp.ctime)
}

// -------------------------------------------------------------------

// UpdateDiskStatusReq

// .snail.stream.CommonResp base = 1;
inline bool UpdateDiskStatusReq::_internal_has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline bool UpdateDiskStatusReq::has_base() const {
  return _internal_has_base();
}
inline const ::snail::stream::CommonResp& UpdateDiskStatusReq::_internal_base() const {
  const ::snail::stream::CommonResp* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::snail::stream::CommonResp&>(
      ::snail::stream::_CommonResp_default_instance_);
}
inline const ::snail::stream::CommonResp& UpdateDiskStatusReq::base() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.base)
  return _internal_base();
}
inline void UpdateDiskStatusReq::unsafe_arena_set_allocated_base(
    ::snail::stream::CommonResp* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:snail.stream.UpdateDiskStatusReq.base)
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::release_base() {
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:snail.stream.UpdateDiskStatusReq.base)
  
  ::snail::stream::CommonResp* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::_internal_mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::snail::stream::CommonResp>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::snail::stream::CommonResp* UpdateDiskStatusReq::mutable_base() {
  ::snail::stream::CommonResp* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:snail.stream.UpdateDiskStatusReq.base)
  return _msg;
}
inline void UpdateDiskStatusReq::set_allocated_base(::snail::stream::CommonResp* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:snail.stream.UpdateDiskStatusReq.base)
}

// uint32 diskid = 2;
inline void UpdateDiskStatusReq::clear_diskid() {
  diskid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateDiskStatusReq::_internal_diskid() const {
  return diskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateDiskStatusReq::diskid() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.diskid)
  return _internal_diskid();
}
inline void UpdateDiskStatusReq::_internal_set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  diskid_ = value;
}
inline void UpdateDiskStatusReq::set_diskid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_diskid(value);
  // @@protoc_insertion_point(field_set:snail.stream.UpdateDiskStatusReq.diskid)
}

// uint32 status = 3;
inline void UpdateDiskStatusReq::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateDiskStatusReq::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateDiskStatusReq::status() const {
  // @@protoc_insertion_point(field_get:snail.stream.UpdateDiskStatusReq.status)
  return _internal_status();
}
inline void UpdateDiskStatusReq::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void UpdateDiskStatusReq::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:snail.stream.UpdateDiskStatusReq.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace snail

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::snail::stream::ExtentnodeMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snail::stream::ExtentnodeMsgType>() {
  return ::snail::stream::ExtentnodeMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extentnode_2eproto
