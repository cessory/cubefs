// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommonReq_HeadersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommonResp_HeadersEntry_DoNotUse;
}  // namespace protobuf_common_2eproto
namespace snail {
namespace stream {
class CommonReq_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonReq_HeadersEntry_DoNotUse>
      _instance;
} _CommonReq_HeadersEntry_DoNotUse_default_instance_;
class CommonReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonReq>
      _instance;
} _CommonReq_default_instance_;
class CommonResp_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonResp_HeadersEntry_DoNotUse>
      _instance;
} _CommonResp_HeadersEntry_DoNotUse_default_instance_;
class CommonRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonResp>
      _instance;
} _CommonResp_default_instance_;
}  // namespace stream
}  // namespace snail
namespace protobuf_common_2eproto {
static void InitDefaultsCommonReq_HeadersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snail::stream::_CommonReq_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::snail::stream::CommonReq_HeadersEntry_DoNotUse();
  }
  ::snail::stream::CommonReq_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonReq_HeadersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonReq_HeadersEntry_DoNotUse}, {}};

static void InitDefaultsCommonReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snail::stream::_CommonReq_default_instance_;
    new (ptr) ::snail::stream::CommonReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snail::stream::CommonReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommonReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommonReq}, {
      &protobuf_common_2eproto::scc_info_CommonReq_HeadersEntry_DoNotUse.base,}};

static void InitDefaultsCommonResp_HeadersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snail::stream::_CommonResp_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::snail::stream::CommonResp_HeadersEntry_DoNotUse();
  }
  ::snail::stream::CommonResp_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonResp_HeadersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonResp_HeadersEntry_DoNotUse}, {}};

static void InitDefaultsCommonResp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snail::stream::_CommonResp_default_instance_;
    new (ptr) ::snail::stream::CommonResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snail::stream::CommonResp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CommonResp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommonResp}, {
      &protobuf_common_2eproto::scc_info_CommonResp_HeadersEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CommonReq_HeadersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonResp_HeadersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonResp.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq, reqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonReq, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp_HeadersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp_HeadersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp, reqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::snail::stream::CommonResp, headers_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::snail::stream::CommonReq_HeadersEntry_DoNotUse)},
  { 9, -1, sizeof(::snail::stream::CommonReq)},
  { 16, 23, sizeof(::snail::stream::CommonResp_HeadersEntry_DoNotUse)},
  { 25, -1, sizeof(::snail::stream::CommonResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::snail::stream::_CommonReq_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::snail::stream::_CommonReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::snail::stream::_CommonResp_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::snail::stream::_CommonResp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014common.proto\022\014snail.stream\"\201\001\n\tCommonR"
      "eq\022\r\n\005reqid\030\001 \001(\004\0225\n\007headers\030\002 \003(\0132$.sna"
      "il.stream.CommonReq.HeadersEntry\032.\n\014Head"
      "ersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
      "\"\236\001\n\nCommonResp\022\r\n\005reqid\030\001 \001(\004\022\014\n\004code\030\002"
      " \001(\005\022\013\n\003msg\030\003 \001(\t\0226\n\007headers\030\004 \003(\0132%.sna"
      "il.stream.CommonResp.HeadersEntry\032.\n\014Hea"
      "dersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_common_2eproto
namespace snail {
namespace stream {

// ===================================================================

CommonReq_HeadersEntry_DoNotUse::CommonReq_HeadersEntry_DoNotUse() {}
CommonReq_HeadersEntry_DoNotUse::CommonReq_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CommonReq_HeadersEntry_DoNotUse::MergeFrom(const CommonReq_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CommonReq_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[0];
}
void CommonReq_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CommonReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonReq::kReqidFieldNumber;
const int CommonReq::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonReq::CommonReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_CommonReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:snail.stream.CommonReq)
}
CommonReq::CommonReq(const CommonReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  reqid_ = from.reqid_;
  // @@protoc_insertion_point(copy_constructor:snail.stream.CommonReq)
}

void CommonReq::SharedCtor() {
  reqid_ = GOOGLE_ULONGLONG(0);
}

CommonReq::~CommonReq() {
  // @@protoc_insertion_point(destructor:snail.stream.CommonReq)
  SharedDtor();
}

void CommonReq::SharedDtor() {
}

void CommonReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonReq::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonReq& CommonReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_CommonReq.base);
  return *internal_default_instance();
}


void CommonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.CommonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  reqid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool CommonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snail.stream.CommonReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 reqid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          CommonReq_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CommonReq_HeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "snail.stream.CommonReq.HeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "snail.stream.CommonReq.HeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snail.stream.CommonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snail.stream.CommonReq)
  return false;
#undef DO_
}

void CommonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snail.stream.CommonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reqid = 1;
  if (this->reqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // map<string, string> headers = 2;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonReq.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonReq.HeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CommonReq_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CommonReq_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:snail.stream.CommonReq)
}

::google::protobuf::uint8* CommonReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.CommonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reqid = 1;
  if (this->reqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // map<string, string> headers = 2;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonReq.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonReq.HeadersEntry.value");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CommonReq_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CommonReq_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.CommonReq)
  return target;
}

size_t CommonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.CommonReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> headers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::std::unique_ptr<CommonReq_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 reqid = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reqid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snail.stream.CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snail.stream.CommonReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snail.stream.CommonReq)
    MergeFrom(*source);
  }
}

void CommonReq::MergeFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.CommonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.reqid() != 0) {
    set_reqid(from.reqid());
  }
}

void CommonReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snail.stream.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReq::CopyFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReq::IsInitialized() const {
  return true;
}

void CommonReq::Swap(CommonReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonReq::InternalSwap(CommonReq* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  swap(reqid_, other->reqid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonReq::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CommonResp_HeadersEntry_DoNotUse::CommonResp_HeadersEntry_DoNotUse() {}
CommonResp_HeadersEntry_DoNotUse::CommonResp_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CommonResp_HeadersEntry_DoNotUse::MergeFrom(const CommonResp_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CommonResp_HeadersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[2];
}
void CommonResp_HeadersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CommonResp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResp::kReqidFieldNumber;
const int CommonResp::kCodeFieldNumber;
const int CommonResp::kMsgFieldNumber;
const int CommonResp::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResp::CommonResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_CommonResp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:snail.stream.CommonResp)
}
CommonResp::CommonResp(const CommonResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&reqid_, &from.reqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&reqid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:snail.stream.CommonResp)
}

void CommonResp::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(code_));
}

CommonResp::~CommonResp() {
  // @@protoc_insertion_point(destructor:snail.stream.CommonResp)
  SharedDtor();
}

void CommonResp::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonResp::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonResp& CommonResp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_CommonResp.base);
  return *internal_default_instance();
}


void CommonResp::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.CommonResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&reqid_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool CommonResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snail.stream.CommonResp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 reqid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "snail.stream.CommonResp.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          CommonResp_HeadersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CommonResp_HeadersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&headers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "snail.stream.CommonResp.HeadersEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "snail.stream.CommonResp.HeadersEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snail.stream.CommonResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snail.stream.CommonResp)
  return false;
#undef DO_
}

void CommonResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snail.stream.CommonResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reqid = 1;
  if (this->reqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "snail.stream.CommonResp.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // map<string, string> headers = 4;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonResp.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonResp.HeadersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CommonResp_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CommonResp_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:snail.stream.CommonResp)
}

::google::protobuf::uint8* CommonResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.CommonResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reqid = 1;
  if (this->reqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "snail.stream.CommonResp.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // map<string, string> headers = 4;
  if (!this->headers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonResp.HeadersEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "snail.stream.CommonResp.HeadersEntry.value");
      }
    };

    if (deterministic &&
        this->headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->headers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CommonResp_HeadersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(headers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<CommonResp_HeadersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->headers().begin();
          it != this->headers().end(); ++it) {
        entry.reset(headers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.CommonResp)
  return target;
}

size_t CommonResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.CommonResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> headers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  {
    ::std::unique_ptr<CommonResp_HeadersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->headers().begin();
        it != this->headers().end(); ++it) {
      entry.reset(headers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // uint64 reqid = 1;
  if (this->reqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reqid());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snail.stream.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snail.stream.CommonResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snail.stream.CommonResp)
    MergeFrom(*source);
  }
}

void CommonResp::MergeFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.CommonResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.reqid() != 0) {
    set_reqid(from.reqid());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void CommonResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snail.stream.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResp::CopyFrom(const CommonResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.CommonResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResp::IsInitialized() const {
  return true;
}

void CommonResp::Swap(CommonResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonResp::InternalSwap(CommonResp* other) {
  using std::swap;
  headers_.Swap(&other->headers_);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reqid_, other->reqid_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonResp::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stream
}  // namespace snail
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::snail::stream::CommonReq_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::snail::stream::CommonReq_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::snail::stream::CommonReq_HeadersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::snail::stream::CommonReq* Arena::CreateMaybeMessage< ::snail::stream::CommonReq >(Arena* arena) {
  return Arena::CreateInternal< ::snail::stream::CommonReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::snail::stream::CommonResp_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::snail::stream::CommonResp_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::snail::stream::CommonResp_HeadersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::snail::stream::CommonResp* Arena::CreateMaybeMessage< ::snail::stream::CommonResp >(Arena* arena) {
  return Arena::CreateInternal< ::snail::stream::CommonResp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
