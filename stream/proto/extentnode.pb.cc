// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extentnode.proto

#include "proto/extentnode.pb.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace snail {
namespace stream {
PROTOBUF_CONSTEXPR WriteExtentReq::WriteExtentReq(::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.extent_id_)*/ {&::_pbi::fixed_address_empty_string,
                                           ::_pbi::ConstantInitialized{}},
          /*decltype(_impl_.base_)*/ nullptr,
          /*decltype(_impl_.off_)*/ uint64_t{0u},
          /*decltype(_impl_.len_)*/ uint64_t{0u},
          /*decltype(_impl_.diskid_)*/ 0u,
          /*decltype(_impl_._cached_size_)*/ {}} {}
struct WriteExtentReqDefaultTypeInternal {
    PROTOBUF_CONSTEXPR WriteExtentReqDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~WriteExtentReqDefaultTypeInternal() {}
    union {
        WriteExtentReq _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WriteExtentReqDefaultTypeInternal
        _WriteExtentReq_default_instance_;
PROTOBUF_CONSTEXPR ReadExtentReq::ReadExtentReq(::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.extent_id_)*/ {&::_pbi::fixed_address_empty_string,
                                           ::_pbi::ConstantInitialized{}},
          /*decltype(_impl_.base_)*/ nullptr,
          /*decltype(_impl_.off_)*/ uint64_t{0u},
          /*decltype(_impl_.len_)*/ uint64_t{0u},
          /*decltype(_impl_.diskid_)*/ 0u,
          /*decltype(_impl_._cached_size_)*/ {}} {}
struct ReadExtentReqDefaultTypeInternal {
    PROTOBUF_CONSTEXPR ReadExtentReqDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~ReadExtentReqDefaultTypeInternal() {}
    union {
        ReadExtentReq _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadExtentReqDefaultTypeInternal
        _ReadExtentReq_default_instance_;
PROTOBUF_CONSTEXPR ReadExtentResp::ReadExtentResp(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.base_)*/ nullptr,
             /*decltype(_impl_.len_)*/ uint64_t{0u},
             /*decltype(_impl_._cached_size_)*/ {}} {}
struct ReadExtentRespDefaultTypeInternal {
    PROTOBUF_CONSTEXPR ReadExtentRespDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~ReadExtentRespDefaultTypeInternal() {}
    union {
        ReadExtentResp _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadExtentRespDefaultTypeInternal
        _ReadExtentResp_default_instance_;
PROTOBUF_CONSTEXPR DeleteExtentReq::DeleteExtentReq(::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.extent_id_)*/ {&::_pbi::fixed_address_empty_string,
                                           ::_pbi::ConstantInitialized{}},
          /*decltype(_impl_.base_)*/ nullptr, /*decltype(_impl_.diskid_)*/ 0u,
          /*decltype(_impl_._cached_size_)*/ {}} {}
struct DeleteExtentReqDefaultTypeInternal {
    PROTOBUF_CONSTEXPR DeleteExtentReqDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~DeleteExtentReqDefaultTypeInternal() {}
    union {
        DeleteExtentReq _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteExtentReqDefaultTypeInternal
        _DeleteExtentReq_default_instance_;
PROTOBUF_CONSTEXPR CreateExtentReq::CreateExtentReq(::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.extent_id_)*/ {&::_pbi::fixed_address_empty_string,
                                           ::_pbi::ConstantInitialized{}},
          /*decltype(_impl_.base_)*/ nullptr, /*decltype(_impl_.diskid_)*/ 0u,
          /*decltype(_impl_._cached_size_)*/ {}} {}
struct CreateExtentReqDefaultTypeInternal {
    PROTOBUF_CONSTEXPR CreateExtentReqDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~CreateExtentReqDefaultTypeInternal() {}
    union {
        CreateExtentReq _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateExtentReqDefaultTypeInternal
        _CreateExtentReq_default_instance_;
PROTOBUF_CONSTEXPR GetExtentReq::GetExtentReq(::_pbi::ConstantInitialized)
    : _impl_{
          /*decltype(_impl_.extent_id_)*/ {&::_pbi::fixed_address_empty_string,
                                           ::_pbi::ConstantInitialized{}},
          /*decltype(_impl_.base_)*/ nullptr, /*decltype(_impl_.diskid_)*/ 0u,
          /*decltype(_impl_._cached_size_)*/ {}} {}
struct GetExtentReqDefaultTypeInternal {
    PROTOBUF_CONSTEXPR GetExtentReqDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~GetExtentReqDefaultTypeInternal() {}
    union {
        GetExtentReq _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetExtentReqDefaultTypeInternal
        _GetExtentReq_default_instance_;
PROTOBUF_CONSTEXPR GetExtentResp::GetExtentResp(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.base_)*/ nullptr,
             /*decltype(_impl_.len_)*/ uint64_t{0u},
             /*decltype(_impl_.ctime_)*/ 0u,
             /*decltype(_impl_._cached_size_)*/ {}} {}
struct GetExtentRespDefaultTypeInternal {
    PROTOBUF_CONSTEXPR GetExtentRespDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~GetExtentRespDefaultTypeInternal() {}
    union {
        GetExtentResp _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetExtentRespDefaultTypeInternal
        _GetExtentResp_default_instance_;
PROTOBUF_CONSTEXPR UpdateDiskStatusReq::UpdateDiskStatusReq(
    ::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.base_)*/ nullptr,
             /*decltype(_impl_.diskid_)*/ 0u, /*decltype(_impl_.status_)*/ 0u,
             /*decltype(_impl_._cached_size_)*/ {}} {}
struct UpdateDiskStatusReqDefaultTypeInternal {
    PROTOBUF_CONSTEXPR UpdateDiskStatusReqDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~UpdateDiskStatusReqDefaultTypeInternal() {}
    union {
        UpdateDiskStatusReq _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDiskStatusReqDefaultTypeInternal
        _UpdateDiskStatusReq_default_instance_;
}  // namespace stream
}  // namespace snail
static ::_pb::Metadata file_level_metadata_extentnode_2eproto[8];
static const ::_pb::EnumDescriptor*
    file_level_enum_descriptors_extentnode_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const**
    file_level_service_descriptors_extentnode_2eproto = nullptr;

const uint32_t
    TableStruct_extentnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, _impl_.diskid_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq,
                              _impl_.extent_id_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, _impl_.off_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, _impl_.len_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, _impl_.diskid_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq,
                              _impl_.extent_id_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, _impl_.off_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, _impl_.len_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentResp,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentResp, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentResp, _impl_.len_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq, _impl_.diskid_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq,
                              _impl_.extent_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq, _impl_.diskid_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq,
                              _impl_.extent_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, _impl_.diskid_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, _impl_.extent_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, _impl_.len_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, _impl_.ctime_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq,
                              _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq,
                              _impl_.diskid_),
        PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq,
                              _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, -1, sizeof(::snail::stream::WriteExtentReq)},
    {11, -1, -1, sizeof(::snail::stream::ReadExtentReq)},
    {22, -1, -1, sizeof(::snail::stream::ReadExtentResp)},
    {30, -1, -1, sizeof(::snail::stream::DeleteExtentReq)},
    {39, -1, -1, sizeof(::snail::stream::CreateExtentReq)},
    {48, -1, -1, sizeof(::snail::stream::GetExtentReq)},
    {57, -1, -1, sizeof(::snail::stream::GetExtentResp)},
    {66, -1, -1, sizeof(::snail::stream::UpdateDiskStatusReq)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::snail::stream::_WriteExtentReq_default_instance_._instance,
    &::snail::stream::_ReadExtentReq_default_instance_._instance,
    &::snail::stream::_ReadExtentResp_default_instance_._instance,
    &::snail::stream::_DeleteExtentReq_default_instance_._instance,
    &::snail::stream::_CreateExtentReq_default_instance_._instance,
    &::snail::stream::_GetExtentReq_default_instance_._instance,
    &::snail::stream::_GetExtentResp_default_instance_._instance,
    &::snail::stream::_UpdateDiskStatusReq_default_instance_._instance,
};

const char
    descriptor_table_protodef_extentnode_2eproto[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) =
        "\n\020extentnode.proto\022\014snail.stream\032\014common"
        ".proto\"t\n\016WriteExtentReq\022%\n\004base\030\001 \001(\0132\027"
        ".snail.stream.CommonReq\022\016\n\006diskid\030\002 \001(\r\022"
        "\021\n\textent_id\030\003 \001(\t\022\013\n\003off\030\004 "
        "\001(\004\022\013\n\003len\030\005"
        " \001(\004\"s\n\rReadExtentReq\022%\n\004base\030\001 "
        "\001(\0132\027.sn"
        "ail.stream.CommonReq\022\016\n\006diskid\030\002 \001(\r\022\021\n\t"
        "extent_id\030\003 \001(\t\022\013\n\003off\030\004 "
        "\001(\004\022\013\n\003len\030\005 \001("
        "\004\"E\n\016ReadExtentResp\022&\n\004base\030\001 \001(\0132\030.snai"
        "l.stream.CommonResp\022\013\n\003len\030\002 \001(\004\"\\\n\017Dele"
        "teExtentReq\022&\n\004base\030\001 \001(\0132\030.snail.stream"
        ".CommonResp\022\016\n\006diskid\030\002 \001(\r\022\021\n\textent_id"
        "\030\003 \001(\t\"\\\n\017CreateExtentReq\022&\n\004base\030\001 "
        "\001(\0132"
        "\030.snail.stream.CommonResp\022\016\n\006diskid\030\002 \001("
        "\r\022\021\n\textent_id\030\003 "
        "\001(\t\"Y\n\014GetExtentReq\022&\n\004"
        "base\030\001 \001(\0132\030.snail.stream.CommonResp\022\016\n\006"
        "diskid\030\002 \001(\r\022\021\n\textent_id\030\003 "
        "\001(\t\"S\n\rGetEx"
        "tentResp\022&\n\004base\030\001 \001(\0132\030.snail.stream.Co"
        "mmonResp\022\013\n\003len\030\002 \001(\004\022\r\n\005ctime\030\003 "
        "\001(\r\"]\n\023"
        "UpdateDiskStatusReq\022&\n\004base\030\001 \001(\0132\030.snai"
        "l.stream.CommonResp\022\016\n\006diskid\030\002 \001(\r\022\016\n\006s"
        "tatus\030\003 \001(\r*\253\002\n\021ExtentnodeMsgType\022\024\n\020WRI"
        "TE_EXTENT_REQ\020\000\022\025\n\021WRITE_EXTENT_RESP\020\001\022\023"
        "\n\017READ_EXTENT_REQ\020\002\022\024\n\020READ_EXTENT_RESP\020"
        "\003\022\025\n\021CREATE_EXTENT_REQ\020\004\022\026\n\022CREATE_EXTEN"
        "T_RESP\020\005\022\025\n\021DELETE_EXTENT_"
        "REQ\020\006\022\026\n\022DELET"
        "E_EXTENT_RESP\020\007\022\022\n\016GET_EXTENT_"
        "REQ\020\010\022\023\n\017G"
        "ET_EXTENT_RESP\020\t\022\032\n\026UPDATE_DISK_STATUS_R"
        "EQ\020\n\022\033\n\027UPDATE_DISK_STATUS_RESP\020\013b\006proto"
        "3";
static const ::_pbi::DescriptorTable* const
    descriptor_table_extentnode_2eproto_deps[1] = {
        &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_extentnode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_extentnode_2eproto = {
    false,
    false,
    1121,
    descriptor_table_protodef_extentnode_2eproto,
    "extentnode.proto",
    &descriptor_table_extentnode_2eproto_once,
    descriptor_table_extentnode_2eproto_deps,
    1,
    8,
    schemas,
    file_default_instances,
    TableStruct_extentnode_2eproto::offsets,
    file_level_metadata_extentnode_2eproto,
    file_level_enum_descriptors_extentnode_2eproto,
    file_level_service_descriptors_extentnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable*
descriptor_table_extentnode_2eproto_getter() {
    return &descriptor_table_extentnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner
    dynamic_init_dummy_extentnode_2eproto(&descriptor_table_extentnode_2eproto);
namespace snail {
namespace stream {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtentnodeMsgType_descriptor() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &descriptor_table_extentnode_2eproto);
    return file_level_enum_descriptors_extentnode_2eproto[0];
}
bool ExtentnodeMsgType_IsValid(int value) {
    switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
            return true;
        default:
            return false;
    }
}

// ===================================================================

class WriteExtentReq::_Internal {
   public:
    static const ::snail::stream::CommonReq& base(const WriteExtentReq* msg);
};

const ::snail::stream::CommonReq& WriteExtentReq::_Internal::base(
    const WriteExtentReq* msg) {
    return *msg->_impl_.base_;
}
void WriteExtentReq::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
WriteExtentReq::WriteExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.WriteExtentReq)
}
WriteExtentReq::WriteExtentReq(const WriteExtentReq& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    WriteExtentReq* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.off_){},       decltype(_impl_.len_){},
        decltype(_impl_.diskid_){},    /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_extent_id().empty()) {
        _this->_impl_.extent_id_.Set(from._internal_extent_id(),
                                     _this->GetArenaForAllocation());
    }
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonReq(*from._impl_.base_);
    }
    ::memcpy(&_impl_.off_, &from._impl_.off_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.diskid_) -
                                 reinterpret_cast<char*>(&_impl_.off_)) +
                 sizeof(_impl_.diskid_));
    // @@protoc_insertion_point(copy_constructor:snail.stream.WriteExtentReq)
}

inline void WriteExtentReq::SharedCtor(::_pb::Arena* arena,
                                       bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{decltype(_impl_.extent_id_){},
                        decltype(_impl_.base_){nullptr},
                        decltype(_impl_.off_){uint64_t{0u}},
                        decltype(_impl_.len_){uint64_t{0u}},
                        decltype(_impl_.diskid_){0u},
                        /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WriteExtentReq::~WriteExtentReq() {
    // @@protoc_insertion_point(destructor:snail.stream.WriteExtentReq)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void WriteExtentReq::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.extent_id_.Destroy();
    if (this != internal_default_instance()) delete _impl_.base_;
}

void WriteExtentReq::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void WriteExtentReq::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.WriteExtentReq)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.extent_id_.ClearToEmpty();
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    ::memset(&_impl_.off_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.diskid_) -
                                 reinterpret_cast<char*>(&_impl_.off_)) +
                 sizeof(_impl_.diskid_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteExtentReq::_InternalParse(const char* ptr,
                                           ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonReq base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 diskid = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.diskid_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string extent_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_extent_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(
                        str, "snail.stream.WriteExtentReq.extent_id"));
                } else
                    goto handle_unusual;
                continue;
            // uint64 off = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                    _impl_.off_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint64 len = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
                    _impl_.len_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* WriteExtentReq::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.WriteExtentReq)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonReq base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_diskid(), target);
    }

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_extent_id().data(),
            static_cast<int>(this->_internal_extent_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "snail.stream.WriteExtentReq.extent_id");
        target = stream->WriteStringMaybeAliased(3, this->_internal_extent_id(),
                                                 target);
    }

    // uint64 off = 4;
    if (this->_internal_off() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
            4, this->_internal_off(), target);
    }

    // uint64 len = 5;
    if (this->_internal_len() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
            5, this->_internal_len(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.WriteExtentReq)
    return target;
}

size_t WriteExtentReq::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.WriteExtentReq)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_extent_id());
    }

    // .snail.stream.CommonReq base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint64 off = 4;
    if (this->_internal_off() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_off());
    }

    // uint64 len = 5;
    if (this->_internal_len() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteExtentReq::_class_data_ =
    {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
     WriteExtentReq::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
WriteExtentReq::GetClassData() const {
    return &_class_data_;
}

void WriteExtentReq::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<WriteExtentReq*>(&to_msg);
    auto& from = static_cast<const WriteExtentReq&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.WriteExtentReq)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_extent_id().empty()) {
        _this->_internal_set_extent_id(from._internal_extent_id());
    }
    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonReq::MergeFrom(
            from._internal_base());
    }
    if (from._internal_off() != 0) {
        _this->_internal_set_off(from._internal_off());
    }
    if (from._internal_len() != 0) {
        _this->_internal_set_len(from._internal_len());
    }
    if (from._internal_diskid() != 0) {
        _this->_internal_set_diskid(from._internal_diskid());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void WriteExtentReq::CopyFrom(const WriteExtentReq& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.WriteExtentReq)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool WriteExtentReq::IsInitialized() const { return true; }

void WriteExtentReq::InternalSwap(WriteExtentReq* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.extent_id_, lhs_arena, &other->_impl_.extent_id_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(WriteExtentReq, _impl_.diskid_) +
        sizeof(WriteExtentReq::_impl_.diskid_) -
        PROTOBUF_FIELD_OFFSET(WriteExtentReq, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteExtentReq::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[0]);
}

// ===================================================================

class ReadExtentReq::_Internal {
   public:
    static const ::snail::stream::CommonReq& base(const ReadExtentReq* msg);
};

const ::snail::stream::CommonReq& ReadExtentReq::_Internal::base(
    const ReadExtentReq* msg) {
    return *msg->_impl_.base_;
}
void ReadExtentReq::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
ReadExtentReq::ReadExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.ReadExtentReq)
}
ReadExtentReq::ReadExtentReq(const ReadExtentReq& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    ReadExtentReq* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.off_){},       decltype(_impl_.len_){},
        decltype(_impl_.diskid_){},    /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_extent_id().empty()) {
        _this->_impl_.extent_id_.Set(from._internal_extent_id(),
                                     _this->GetArenaForAllocation());
    }
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonReq(*from._impl_.base_);
    }
    ::memcpy(&_impl_.off_, &from._impl_.off_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.diskid_) -
                                 reinterpret_cast<char*>(&_impl_.off_)) +
                 sizeof(_impl_.diskid_));
    // @@protoc_insertion_point(copy_constructor:snail.stream.ReadExtentReq)
}

inline void ReadExtentReq::SharedCtor(::_pb::Arena* arena,
                                      bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{decltype(_impl_.extent_id_){},
                        decltype(_impl_.base_){nullptr},
                        decltype(_impl_.off_){uint64_t{0u}},
                        decltype(_impl_.len_){uint64_t{0u}},
                        decltype(_impl_.diskid_){0u},
                        /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadExtentReq::~ReadExtentReq() {
    // @@protoc_insertion_point(destructor:snail.stream.ReadExtentReq)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void ReadExtentReq::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.extent_id_.Destroy();
    if (this != internal_default_instance()) delete _impl_.base_;
}

void ReadExtentReq::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void ReadExtentReq::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.ReadExtentReq)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.extent_id_.ClearToEmpty();
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    ::memset(&_impl_.off_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.diskid_) -
                                 reinterpret_cast<char*>(&_impl_.off_)) +
                 sizeof(_impl_.diskid_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadExtentReq::_InternalParse(const char* ptr,
                                          ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonReq base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 diskid = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.diskid_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string extent_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_extent_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(
                        str, "snail.stream.ReadExtentReq.extent_id"));
                } else
                    goto handle_unusual;
                continue;
            // uint64 off = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                    _impl_.off_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint64 len = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
                    _impl_.len_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* ReadExtentReq::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.ReadExtentReq)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonReq base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_diskid(), target);
    }

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_extent_id().data(),
            static_cast<int>(this->_internal_extent_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "snail.stream.ReadExtentReq.extent_id");
        target = stream->WriteStringMaybeAliased(3, this->_internal_extent_id(),
                                                 target);
    }

    // uint64 off = 4;
    if (this->_internal_off() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
            4, this->_internal_off(), target);
    }

    // uint64 len = 5;
    if (this->_internal_len() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
            5, this->_internal_len(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.ReadExtentReq)
    return target;
}

size_t ReadExtentReq::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.ReadExtentReq)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_extent_id());
    }

    // .snail.stream.CommonReq base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint64 off = 4;
    if (this->_internal_off() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_off());
    }

    // uint64 len = 5;
    if (this->_internal_len() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadExtentReq::_class_data_ =
    {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
     ReadExtentReq::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* ReadExtentReq::GetClassData()
    const {
    return &_class_data_;
}

void ReadExtentReq::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<ReadExtentReq*>(&to_msg);
    auto& from = static_cast<const ReadExtentReq&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.ReadExtentReq)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_extent_id().empty()) {
        _this->_internal_set_extent_id(from._internal_extent_id());
    }
    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonReq::MergeFrom(
            from._internal_base());
    }
    if (from._internal_off() != 0) {
        _this->_internal_set_off(from._internal_off());
    }
    if (from._internal_len() != 0) {
        _this->_internal_set_len(from._internal_len());
    }
    if (from._internal_diskid() != 0) {
        _this->_internal_set_diskid(from._internal_diskid());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void ReadExtentReq::CopyFrom(const ReadExtentReq& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.ReadExtentReq)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ReadExtentReq::IsInitialized() const { return true; }

void ReadExtentReq::InternalSwap(ReadExtentReq* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.extent_id_, lhs_arena, &other->_impl_.extent_id_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ReadExtentReq, _impl_.diskid_) +
        sizeof(ReadExtentReq::_impl_.diskid_) -
        PROTOBUF_FIELD_OFFSET(ReadExtentReq, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadExtentReq::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[1]);
}

// ===================================================================

class ReadExtentResp::_Internal {
   public:
    static const ::snail::stream::CommonResp& base(const ReadExtentResp* msg);
};

const ::snail::stream::CommonResp& ReadExtentResp::_Internal::base(
    const ReadExtentResp* msg) {
    return *msg->_impl_.base_;
}
void ReadExtentResp::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
ReadExtentResp::ReadExtentResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.ReadExtentResp)
}
ReadExtentResp::ReadExtentResp(const ReadExtentResp& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    ReadExtentResp* const _this = this;
    (void)_this;
    new (&_impl_)
        Impl_{decltype(_impl_.base_){nullptr}, decltype(_impl_.len_){},
              /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonResp(*from._impl_.base_);
    }
    _this->_impl_.len_ = from._impl_.len_;
    // @@protoc_insertion_point(copy_constructor:snail.stream.ReadExtentResp)
}

inline void ReadExtentResp::SharedCtor(::_pb::Arena* arena,
                                       bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{decltype(_impl_.base_){nullptr},
                        decltype(_impl_.len_){uint64_t{0u}},
                        /*decltype(_impl_._cached_size_)*/ {}};
}

ReadExtentResp::~ReadExtentResp() {
    // @@protoc_insertion_point(destructor:snail.stream.ReadExtentResp)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void ReadExtentResp::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.base_;
}

void ReadExtentResp::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void ReadExtentResp::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.ReadExtentResp)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    _impl_.len_ = uint64_t{0u};
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadExtentResp::_InternalParse(const char* ptr,
                                           ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonResp base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint64 len = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.len_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* ReadExtentResp::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.ReadExtentResp)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint64 len = 2;
    if (this->_internal_len() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_len(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.ReadExtentResp)
    return target;
}

size_t ReadExtentResp::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.ReadExtentResp)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint64 len = 2;
    if (this->_internal_len() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadExtentResp::_class_data_ =
    {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
     ReadExtentResp::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
ReadExtentResp::GetClassData() const {
    return &_class_data_;
}

void ReadExtentResp::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<ReadExtentResp*>(&to_msg);
    auto& from = static_cast<const ReadExtentResp&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.ReadExtentResp)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(
            from._internal_base());
    }
    if (from._internal_len() != 0) {
        _this->_internal_set_len(from._internal_len());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void ReadExtentResp::CopyFrom(const ReadExtentResp& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.ReadExtentResp)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool ReadExtentResp::IsInitialized() const { return true; }

void ReadExtentResp::InternalSwap(ReadExtentResp* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ReadExtentResp, _impl_.len_) +
        sizeof(ReadExtentResp::_impl_.len_) -
        PROTOBUF_FIELD_OFFSET(ReadExtentResp, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadExtentResp::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[2]);
}

// ===================================================================

class DeleteExtentReq::_Internal {
   public:
    static const ::snail::stream::CommonResp& base(const DeleteExtentReq* msg);
};

const ::snail::stream::CommonResp& DeleteExtentReq::_Internal::base(
    const DeleteExtentReq* msg) {
    return *msg->_impl_.base_;
}
void DeleteExtentReq::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
DeleteExtentReq::DeleteExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.DeleteExtentReq)
}
DeleteExtentReq::DeleteExtentReq(const DeleteExtentReq& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    DeleteExtentReq* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.diskid_){}, /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_extent_id().empty()) {
        _this->_impl_.extent_id_.Set(from._internal_extent_id(),
                                     _this->GetArenaForAllocation());
    }
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonResp(*from._impl_.base_);
    }
    _this->_impl_.diskid_ = from._impl_.diskid_;
    // @@protoc_insertion_point(copy_constructor:snail.stream.DeleteExtentReq)
}

inline void DeleteExtentReq::SharedCtor(::_pb::Arena* arena,
                                        bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.diskid_){0u}, /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteExtentReq::~DeleteExtentReq() {
    // @@protoc_insertion_point(destructor:snail.stream.DeleteExtentReq)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void DeleteExtentReq::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.extent_id_.Destroy();
    if (this != internal_default_instance()) delete _impl_.base_;
}

void DeleteExtentReq::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void DeleteExtentReq::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.DeleteExtentReq)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.extent_id_.ClearToEmpty();
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    _impl_.diskid_ = 0u;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteExtentReq::_InternalParse(const char* ptr,
                                            ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonResp base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 diskid = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.diskid_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string extent_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_extent_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(
                        str, "snail.stream.DeleteExtentReq.extent_id"));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* DeleteExtentReq::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.DeleteExtentReq)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_diskid(), target);
    }

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_extent_id().data(),
            static_cast<int>(this->_internal_extent_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "snail.stream.DeleteExtentReq.extent_id");
        target = stream->WriteStringMaybeAliased(3, this->_internal_extent_id(),
                                                 target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.DeleteExtentReq)
    return target;
}

size_t DeleteExtentReq::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.DeleteExtentReq)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_extent_id());
    }

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    DeleteExtentReq::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        DeleteExtentReq::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
DeleteExtentReq::GetClassData() const {
    return &_class_data_;
}

void DeleteExtentReq::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<DeleteExtentReq*>(&to_msg);
    auto& from = static_cast<const DeleteExtentReq&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.DeleteExtentReq)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_extent_id().empty()) {
        _this->_internal_set_extent_id(from._internal_extent_id());
    }
    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(
            from._internal_base());
    }
    if (from._internal_diskid() != 0) {
        _this->_internal_set_diskid(from._internal_diskid());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void DeleteExtentReq::CopyFrom(const DeleteExtentReq& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.DeleteExtentReq)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool DeleteExtentReq::IsInitialized() const { return true; }

void DeleteExtentReq::InternalSwap(DeleteExtentReq* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.extent_id_, lhs_arena, &other->_impl_.extent_id_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(DeleteExtentReq, _impl_.diskid_) +
        sizeof(DeleteExtentReq::_impl_.diskid_) -
        PROTOBUF_FIELD_OFFSET(DeleteExtentReq, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteExtentReq::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[3]);
}

// ===================================================================

class CreateExtentReq::_Internal {
   public:
    static const ::snail::stream::CommonResp& base(const CreateExtentReq* msg);
};

const ::snail::stream::CommonResp& CreateExtentReq::_Internal::base(
    const CreateExtentReq* msg) {
    return *msg->_impl_.base_;
}
void CreateExtentReq::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
CreateExtentReq::CreateExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.CreateExtentReq)
}
CreateExtentReq::CreateExtentReq(const CreateExtentReq& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    CreateExtentReq* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.diskid_){}, /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_extent_id().empty()) {
        _this->_impl_.extent_id_.Set(from._internal_extent_id(),
                                     _this->GetArenaForAllocation());
    }
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonResp(*from._impl_.base_);
    }
    _this->_impl_.diskid_ = from._impl_.diskid_;
    // @@protoc_insertion_point(copy_constructor:snail.stream.CreateExtentReq)
}

inline void CreateExtentReq::SharedCtor(::_pb::Arena* arena,
                                        bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.diskid_){0u}, /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateExtentReq::~CreateExtentReq() {
    // @@protoc_insertion_point(destructor:snail.stream.CreateExtentReq)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void CreateExtentReq::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.extent_id_.Destroy();
    if (this != internal_default_instance()) delete _impl_.base_;
}

void CreateExtentReq::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void CreateExtentReq::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.CreateExtentReq)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.extent_id_.ClearToEmpty();
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    _impl_.diskid_ = 0u;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateExtentReq::_InternalParse(const char* ptr,
                                            ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonResp base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 diskid = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.diskid_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string extent_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_extent_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(
                        str, "snail.stream.CreateExtentReq.extent_id"));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* CreateExtentReq::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.CreateExtentReq)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_diskid(), target);
    }

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_extent_id().data(),
            static_cast<int>(this->_internal_extent_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "snail.stream.CreateExtentReq.extent_id");
        target = stream->WriteStringMaybeAliased(3, this->_internal_extent_id(),
                                                 target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.CreateExtentReq)
    return target;
}

size_t CreateExtentReq::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.CreateExtentReq)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_extent_id());
    }

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    CreateExtentReq::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        CreateExtentReq::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
CreateExtentReq::GetClassData() const {
    return &_class_data_;
}

void CreateExtentReq::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<CreateExtentReq*>(&to_msg);
    auto& from = static_cast<const CreateExtentReq&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.CreateExtentReq)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_extent_id().empty()) {
        _this->_internal_set_extent_id(from._internal_extent_id());
    }
    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(
            from._internal_base());
    }
    if (from._internal_diskid() != 0) {
        _this->_internal_set_diskid(from._internal_diskid());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void CreateExtentReq::CopyFrom(const CreateExtentReq& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.CreateExtentReq)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool CreateExtentReq::IsInitialized() const { return true; }

void CreateExtentReq::InternalSwap(CreateExtentReq* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.extent_id_, lhs_arena, &other->_impl_.extent_id_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(CreateExtentReq, _impl_.diskid_) +
        sizeof(CreateExtentReq::_impl_.diskid_) -
        PROTOBUF_FIELD_OFFSET(CreateExtentReq, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateExtentReq::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[4]);
}

// ===================================================================

class GetExtentReq::_Internal {
   public:
    static const ::snail::stream::CommonResp& base(const GetExtentReq* msg);
};

const ::snail::stream::CommonResp& GetExtentReq::_Internal::base(
    const GetExtentReq* msg) {
    return *msg->_impl_.base_;
}
void GetExtentReq::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
GetExtentReq::GetExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.GetExtentReq)
}
GetExtentReq::GetExtentReq(const GetExtentReq& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    GetExtentReq* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.diskid_){}, /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_extent_id().empty()) {
        _this->_impl_.extent_id_.Set(from._internal_extent_id(),
                                     _this->GetArenaForAllocation());
    }
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonResp(*from._impl_.base_);
    }
    _this->_impl_.diskid_ = from._impl_.diskid_;
    // @@protoc_insertion_point(copy_constructor:snail.stream.GetExtentReq)
}

inline void GetExtentReq::SharedCtor(::_pb::Arena* arena,
                                     bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.extent_id_){}, decltype(_impl_.base_){nullptr},
        decltype(_impl_.diskid_){0u}, /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.extent_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extent_id_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetExtentReq::~GetExtentReq() {
    // @@protoc_insertion_point(destructor:snail.stream.GetExtentReq)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void GetExtentReq::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.extent_id_.Destroy();
    if (this != internal_default_instance()) delete _impl_.base_;
}

void GetExtentReq::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void GetExtentReq::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.GetExtentReq)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.extent_id_.ClearToEmpty();
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    _impl_.diskid_ = 0u;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExtentReq::_InternalParse(const char* ptr,
                                         ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonResp base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 diskid = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.diskid_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string extent_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
                    auto str = _internal_mutable_extent_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(
                        str, "snail.stream.GetExtentReq.extent_id"));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* GetExtentReq::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.GetExtentReq)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_diskid(), target);
    }

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_extent_id().data(),
            static_cast<int>(this->_internal_extent_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "snail.stream.GetExtentReq.extent_id");
        target = stream->WriteStringMaybeAliased(3, this->_internal_extent_id(),
                                                 target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.GetExtentReq)
    return target;
}

size_t GetExtentReq::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.GetExtentReq)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string extent_id = 3;
    if (!this->_internal_extent_id().empty()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                    this->_internal_extent_id());
    }

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExtentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetExtentReq::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetExtentReq::GetClassData()
    const {
    return &_class_data_;
}

void GetExtentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                             const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<GetExtentReq*>(&to_msg);
    auto& from = static_cast<const GetExtentReq&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.GetExtentReq)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_extent_id().empty()) {
        _this->_internal_set_extent_id(from._internal_extent_id());
    }
    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(
            from._internal_base());
    }
    if (from._internal_diskid() != 0) {
        _this->_internal_set_diskid(from._internal_diskid());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void GetExtentReq::CopyFrom(const GetExtentReq& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.GetExtentReq)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool GetExtentReq::IsInitialized() const { return true; }

void GetExtentReq::InternalSwap(GetExtentReq* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.extent_id_, lhs_arena, &other->_impl_.extent_id_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(GetExtentReq, _impl_.diskid_) +
        sizeof(GetExtentReq::_impl_.diskid_) -
        PROTOBUF_FIELD_OFFSET(GetExtentReq, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExtentReq::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[5]);
}

// ===================================================================

class GetExtentResp::_Internal {
   public:
    static const ::snail::stream::CommonResp& base(const GetExtentResp* msg);
};

const ::snail::stream::CommonResp& GetExtentResp::_Internal::base(
    const GetExtentResp* msg) {
    return *msg->_impl_.base_;
}
void GetExtentResp::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
GetExtentResp::GetExtentResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.GetExtentResp)
}
GetExtentResp::GetExtentResp(const GetExtentResp& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    GetExtentResp* const _this = this;
    (void)_this;
    new (&_impl_)
        Impl_{decltype(_impl_.base_){nullptr}, decltype(_impl_.len_){},
              decltype(_impl_.ctime_){}, /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonResp(*from._impl_.base_);
    }
    ::memcpy(&_impl_.len_, &from._impl_.len_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ctime_) -
                                 reinterpret_cast<char*>(&_impl_.len_)) +
                 sizeof(_impl_.ctime_));
    // @@protoc_insertion_point(copy_constructor:snail.stream.GetExtentResp)
}

inline void GetExtentResp::SharedCtor(::_pb::Arena* arena,
                                      bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.base_){nullptr}, decltype(_impl_.len_){uint64_t{0u}},
        decltype(_impl_.ctime_){0u}, /*decltype(_impl_._cached_size_)*/ {}};
}

GetExtentResp::~GetExtentResp() {
    // @@protoc_insertion_point(destructor:snail.stream.GetExtentResp)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void GetExtentResp::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.base_;
}

void GetExtentResp::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void GetExtentResp::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.GetExtentResp)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    ::memset(&_impl_.len_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ctime_) -
                                 reinterpret_cast<char*>(&_impl_.len_)) +
                 sizeof(_impl_.ctime_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExtentResp::_InternalParse(const char* ptr,
                                          ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonResp base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint64 len = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.len_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 ctime = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.ctime_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* GetExtentResp::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.GetExtentResp)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint64 len = 2;
    if (this->_internal_len() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
            2, this->_internal_len(), target);
    }

    // uint32 ctime = 3;
    if (this->_internal_ctime() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            3, this->_internal_ctime(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.GetExtentResp)
    return target;
}

size_t GetExtentResp::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.GetExtentResp)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint64 len = 2;
    if (this->_internal_len() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
    }

    // uint32 ctime = 3;
    if (this->_internal_ctime() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ctime());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExtentResp::_class_data_ =
    {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
     GetExtentResp::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetExtentResp::GetClassData()
    const {
    return &_class_data_;
}

void GetExtentResp::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<GetExtentResp*>(&to_msg);
    auto& from = static_cast<const GetExtentResp&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.GetExtentResp)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(
            from._internal_base());
    }
    if (from._internal_len() != 0) {
        _this->_internal_set_len(from._internal_len());
    }
    if (from._internal_ctime() != 0) {
        _this->_internal_set_ctime(from._internal_ctime());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void GetExtentResp::CopyFrom(const GetExtentResp& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.GetExtentResp)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool GetExtentResp::IsInitialized() const { return true; }

void GetExtentResp::InternalSwap(GetExtentResp* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(GetExtentResp, _impl_.ctime_) +
        sizeof(GetExtentResp::_impl_.ctime_) -
        PROTOBUF_FIELD_OFFSET(GetExtentResp, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExtentResp::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[6]);
}

// ===================================================================

class UpdateDiskStatusReq::_Internal {
   public:
    static const ::snail::stream::CommonResp& base(
        const UpdateDiskStatusReq* msg);
};

const ::snail::stream::CommonResp& UpdateDiskStatusReq::_Internal::base(
    const UpdateDiskStatusReq* msg) {
    return *msg->_impl_.base_;
}
void UpdateDiskStatusReq::clear_base() {
    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
}
UpdateDiskStatusReq::UpdateDiskStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                         bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:snail.stream.UpdateDiskStatusReq)
}
UpdateDiskStatusReq::UpdateDiskStatusReq(const UpdateDiskStatusReq& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
    UpdateDiskStatusReq* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{decltype(_impl_.base_){nullptr},
                        decltype(_impl_.diskid_){}, decltype(_impl_.status_){},
                        /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
        from._internal_metadata_);
    if (from._internal_has_base()) {
        _this->_impl_.base_ =
            new ::snail::stream::CommonResp(*from._impl_.base_);
    }
    ::memcpy(&_impl_.diskid_, &from._impl_.diskid_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
                                 reinterpret_cast<char*>(&_impl_.diskid_)) +
                 sizeof(_impl_.status_));
    // @@protoc_insertion_point(copy_constructor:snail.stream.UpdateDiskStatusReq)
}

inline void UpdateDiskStatusReq::SharedCtor(::_pb::Arena* arena,
                                            bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{
        decltype(_impl_.base_){nullptr}, decltype(_impl_.diskid_){0u},
        decltype(_impl_.status_){0u}, /*decltype(_impl_._cached_size_)*/ {}};
}

UpdateDiskStatusReq::~UpdateDiskStatusReq() {
    // @@protoc_insertion_point(destructor:snail.stream.UpdateDiskStatusReq)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<
                      ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void UpdateDiskStatusReq::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    if (this != internal_default_instance()) delete _impl_.base_;
}

void UpdateDiskStatusReq::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void UpdateDiskStatusReq::Clear() {
    // @@protoc_insertion_point(message_clear_start:snail.stream.UpdateDiskStatusReq)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
        delete _impl_.base_;
    }
    _impl_.base_ = nullptr;
    ::memset(&_impl_.diskid_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
                                 reinterpret_cast<char*>(&_impl_.diskid_)) +
                 sizeof(_impl_.status_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDiskStatusReq::_InternalParse(const char* ptr,
                                                ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // .snail.stream.CommonResp base = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 diskid = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
                    _impl_.diskid_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // uint32 status = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.status_ =
                        ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        }  // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
    }  // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* UpdateDiskStatusReq::_InternalSerialize(
    uint8_t* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:snail.stream.UpdateDiskStatusReq)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
            InternalWriteMessage(1, _Internal::base(this),
                                 _Internal::base(this).GetCachedSize(), target,
                                 stream);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_diskid(), target);
    }

    // uint32 status = 3;
    if (this->_internal_status() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
            3, this->_internal_status(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:snail.stream.UpdateDiskStatusReq)
    return target;
}

size_t UpdateDiskStatusReq::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:snail.stream.UpdateDiskStatusReq)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // .snail.stream.CommonResp base = 1;
    if (this->_internal_has_base()) {
        total_size +=
            1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                    *_impl_.base_);
    }

    // uint32 diskid = 2;
    if (this->_internal_diskid() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
    }

    // uint32 status = 3;
    if (this->_internal_status() != 0) {
        total_size +=
            ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    UpdateDiskStatusReq::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        UpdateDiskStatusReq::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
UpdateDiskStatusReq::GetClassData() const {
    return &_class_data_;
}

void UpdateDiskStatusReq::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message& to_msg,
    const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<UpdateDiskStatusReq*>(&to_msg);
    auto& from = static_cast<const UpdateDiskStatusReq&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.UpdateDiskStatusReq)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (from._internal_has_base()) {
        _this->_internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(
            from._internal_base());
    }
    if (from._internal_diskid() != 0) {
        _this->_internal_set_diskid(from._internal_diskid());
    }
    if (from._internal_status() != 0) {
        _this->_internal_set_status(from._internal_status());
    }
    _this->_internal_metadata_
        .MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            from._internal_metadata_);
}

void UpdateDiskStatusReq::CopyFrom(const UpdateDiskStatusReq& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.UpdateDiskStatusReq)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool UpdateDiskStatusReq::IsInitialized() const { return true; }

void UpdateDiskStatusReq::InternalSwap(UpdateDiskStatusReq* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(UpdateDiskStatusReq, _impl_.status_) +
        sizeof(UpdateDiskStatusReq::_impl_.status_) -
        PROTOBUF_FIELD_OFFSET(UpdateDiskStatusReq, _impl_.base_)>(
        reinterpret_cast<char*>(&_impl_.base_),
        reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDiskStatusReq::GetMetadata() const {
    return ::_pbi::AssignDescriptors(
        &descriptor_table_extentnode_2eproto_getter,
        &descriptor_table_extentnode_2eproto_once,
        file_level_metadata_extentnode_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stream
}  // namespace snail
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::snail::stream::WriteExtentReq*
Arena::CreateMaybeMessage<::snail::stream::WriteExtentReq>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::WriteExtentReq>(arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::ReadExtentReq*
Arena::CreateMaybeMessage<::snail::stream::ReadExtentReq>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::ReadExtentReq>(arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::ReadExtentResp*
Arena::CreateMaybeMessage<::snail::stream::ReadExtentResp>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::ReadExtentResp>(arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::DeleteExtentReq*
Arena::CreateMaybeMessage<::snail::stream::DeleteExtentReq>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::DeleteExtentReq>(
        arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::CreateExtentReq*
Arena::CreateMaybeMessage<::snail::stream::CreateExtentReq>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::CreateExtentReq>(
        arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::GetExtentReq*
Arena::CreateMaybeMessage<::snail::stream::GetExtentReq>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::GetExtentReq>(arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::GetExtentResp*
Arena::CreateMaybeMessage<::snail::stream::GetExtentResp>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::GetExtentResp>(arena);
}
template <>
PROTOBUF_NOINLINE ::snail::stream::UpdateDiskStatusReq*
Arena::CreateMaybeMessage<::snail::stream::UpdateDiskStatusReq>(Arena* arena) {
    return Arena::CreateMessageInternal<::snail::stream::UpdateDiskStatusReq>(
        arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
