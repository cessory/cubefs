// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extentnode.proto

#include "extentnode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace snail {
namespace stream {
constexpr WriteExtentReq::WriteExtentReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , off_(uint64_t{0u})
  , len_(uint64_t{0u})
  , diskid_(0u){}
struct WriteExtentReqDefaultTypeInternal {
  constexpr WriteExtentReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteExtentReqDefaultTypeInternal() {}
  union {
    WriteExtentReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteExtentReqDefaultTypeInternal _WriteExtentReq_default_instance_;
constexpr ReadExtentReq::ReadExtentReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , off_(uint64_t{0u})
  , len_(uint64_t{0u})
  , diskid_(0u){}
struct ReadExtentReqDefaultTypeInternal {
  constexpr ReadExtentReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadExtentReqDefaultTypeInternal() {}
  union {
    ReadExtentReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadExtentReqDefaultTypeInternal _ReadExtentReq_default_instance_;
constexpr ReadExtentResp::ReadExtentResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(nullptr)
  , len_(uint64_t{0u}){}
struct ReadExtentRespDefaultTypeInternal {
  constexpr ReadExtentRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReadExtentRespDefaultTypeInternal() {}
  union {
    ReadExtentResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReadExtentRespDefaultTypeInternal _ReadExtentResp_default_instance_;
constexpr DeleteExtentReq::DeleteExtentReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , diskid_(0u){}
struct DeleteExtentReqDefaultTypeInternal {
  constexpr DeleteExtentReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteExtentReqDefaultTypeInternal() {}
  union {
    DeleteExtentReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteExtentReqDefaultTypeInternal _DeleteExtentReq_default_instance_;
constexpr CreateExtentReq::CreateExtentReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , diskid_(0u){}
struct CreateExtentReqDefaultTypeInternal {
  constexpr CreateExtentReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateExtentReqDefaultTypeInternal() {}
  union {
    CreateExtentReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateExtentReqDefaultTypeInternal _CreateExtentReq_default_instance_;
constexpr GetExtentReq::GetExtentReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_(nullptr)
  , diskid_(0u){}
struct GetExtentReqDefaultTypeInternal {
  constexpr GetExtentReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExtentReqDefaultTypeInternal() {}
  union {
    GetExtentReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExtentReqDefaultTypeInternal _GetExtentReq_default_instance_;
constexpr GetExtentResp::GetExtentResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(nullptr)
  , len_(uint64_t{0u})
  , ctime_(0u){}
struct GetExtentRespDefaultTypeInternal {
  constexpr GetExtentRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetExtentRespDefaultTypeInternal() {}
  union {
    GetExtentResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetExtentRespDefaultTypeInternal _GetExtentResp_default_instance_;
constexpr UpdateDiskStatusReq::UpdateDiskStatusReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(nullptr)
  , diskid_(0u)
  , status_(0u){}
struct UpdateDiskStatusReqDefaultTypeInternal {
  constexpr UpdateDiskStatusReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDiskStatusReqDefaultTypeInternal() {}
  union {
    UpdateDiskStatusReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDiskStatusReqDefaultTypeInternal _UpdateDiskStatusReq_default_instance_;
}  // namespace stream
}  // namespace snail
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_extentnode_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_extentnode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_extentnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_extentnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, diskid_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, extent_id_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, off_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::WriteExtentReq, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, diskid_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, extent_id_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, off_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentReq, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentResp, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::ReadExtentResp, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq, diskid_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::DeleteExtentReq, extent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq, diskid_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::CreateExtentReq, extent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, diskid_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentReq, extent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, len_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::GetExtentResp, ctime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq, base_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq, diskid_),
  PROTOBUF_FIELD_OFFSET(::snail::stream::UpdateDiskStatusReq, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::snail::stream::WriteExtentReq)},
  { 11, -1, -1, sizeof(::snail::stream::ReadExtentReq)},
  { 22, -1, -1, sizeof(::snail::stream::ReadExtentResp)},
  { 30, -1, -1, sizeof(::snail::stream::DeleteExtentReq)},
  { 39, -1, -1, sizeof(::snail::stream::CreateExtentReq)},
  { 48, -1, -1, sizeof(::snail::stream::GetExtentReq)},
  { 57, -1, -1, sizeof(::snail::stream::GetExtentResp)},
  { 66, -1, -1, sizeof(::snail::stream::UpdateDiskStatusReq)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_WriteExtentReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_ReadExtentReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_ReadExtentResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_DeleteExtentReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_CreateExtentReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_GetExtentReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_GetExtentResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snail::stream::_UpdateDiskStatusReq_default_instance_),
};

const char descriptor_table_protodef_extentnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020extentnode.proto\022\014snail.stream\032\014common"
  ".proto\"t\n\016WriteExtentReq\022%\n\004base\030\001 \001(\0132\027"
  ".snail.stream.CommonReq\022\016\n\006diskid\030\002 \001(\r\022"
  "\021\n\textent_id\030\003 \001(\t\022\013\n\003off\030\004 \001(\004\022\013\n\003len\030\005"
  " \001(\004\"s\n\rReadExtentReq\022%\n\004base\030\001 \001(\0132\027.sn"
  "ail.stream.CommonReq\022\016\n\006diskid\030\002 \001(\r\022\021\n\t"
  "extent_id\030\003 \001(\t\022\013\n\003off\030\004 \001(\004\022\013\n\003len\030\005 \001("
  "\004\"E\n\016ReadExtentResp\022&\n\004base\030\001 \001(\0132\030.snai"
  "l.stream.CommonResp\022\013\n\003len\030\002 \001(\004\"\\\n\017Dele"
  "teExtentReq\022&\n\004base\030\001 \001(\0132\030.snail.stream"
  ".CommonResp\022\016\n\006diskid\030\002 \001(\r\022\021\n\textent_id"
  "\030\003 \001(\t\"\\\n\017CreateExtentReq\022&\n\004base\030\001 \001(\0132"
  "\030.snail.stream.CommonResp\022\016\n\006diskid\030\002 \001("
  "\r\022\021\n\textent_id\030\003 \001(\t\"Y\n\014GetExtentReq\022&\n\004"
  "base\030\001 \001(\0132\030.snail.stream.CommonResp\022\016\n\006"
  "diskid\030\002 \001(\r\022\021\n\textent_id\030\003 \001(\t\"S\n\rGetEx"
  "tentResp\022&\n\004base\030\001 \001(\0132\030.snail.stream.Co"
  "mmonResp\022\013\n\003len\030\002 \001(\004\022\r\n\005ctime\030\003 \001(\r\"]\n\023"
  "UpdateDiskStatusReq\022&\n\004base\030\001 \001(\0132\030.snai"
  "l.stream.CommonResp\022\016\n\006diskid\030\002 \001(\r\022\016\n\006s"
  "tatus\030\003 \001(\r*\253\002\n\021ExtentnodeMsgType\022\024\n\020WRI"
  "TE_EXTENT_REQ\020\000\022\025\n\021WRITE_EXTENT_RESP\020\001\022\023"
  "\n\017READ_EXTENT_REQ\020\002\022\024\n\020READ_EXTENT_RESP\020"
  "\003\022\025\n\021CREATE_EXTENT_REQ\020\004\022\026\n\022CREATE_EXTEN"
  "T_RESP\020\005\022\025\n\021DELETE_EXTENT_REQ\020\006\022\026\n\022DELET"
  "E_EXTENT_RESP\020\007\022\022\n\016GET_EXTENT_REQ\020\010\022\023\n\017G"
  "ET_EXTENT_RESP\020\t\022\032\n\026UPDATE_DISK_STATUS_R"
  "EQ\020\n\022\033\n\027UPDATE_DISK_STATUS_RESP\020\013b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_extentnode_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_extentnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extentnode_2eproto = {
  false, false, 1121, descriptor_table_protodef_extentnode_2eproto, "extentnode.proto", 
  &descriptor_table_extentnode_2eproto_once, descriptor_table_extentnode_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_extentnode_2eproto::offsets,
  file_level_metadata_extentnode_2eproto, file_level_enum_descriptors_extentnode_2eproto, file_level_service_descriptors_extentnode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_extentnode_2eproto_getter() {
  return &descriptor_table_extentnode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_extentnode_2eproto(&descriptor_table_extentnode_2eproto);
namespace snail {
namespace stream {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtentnodeMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_extentnode_2eproto);
  return file_level_enum_descriptors_extentnode_2eproto[0];
}
bool ExtentnodeMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class WriteExtentReq::_Internal {
 public:
  static const ::snail::stream::CommonReq& base(const WriteExtentReq* msg);
};

const ::snail::stream::CommonReq&
WriteExtentReq::_Internal::base(const WriteExtentReq* msg) {
  return *msg->base_;
}
void WriteExtentReq::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
WriteExtentReq::WriteExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.WriteExtentReq)
}
WriteExtentReq::WriteExtentReq(const WriteExtentReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extent_id().empty()) {
    extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extent_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonReq(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&off_, &from.off_,
    static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&off_)) + sizeof(diskid_));
  // @@protoc_insertion_point(copy_constructor:snail.stream.WriteExtentReq)
}

void WriteExtentReq::SharedCtor() {
extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&base_)) + sizeof(diskid_));
}

WriteExtentReq::~WriteExtentReq() {
  // @@protoc_insertion_point(destructor:snail.stream.WriteExtentReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteExtentReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void WriteExtentReq::ArenaDtor(void* object) {
  WriteExtentReq* _this = reinterpret_cast< WriteExtentReq* >(object);
  (void)_this;
}
void WriteExtentReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteExtentReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteExtentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.WriteExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&off_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diskid_) -
      reinterpret_cast<char*>(&off_)) + sizeof(diskid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteExtentReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonReq base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 diskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snail.stream.WriteExtentReq.extent_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 off = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteExtentReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.WriteExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonReq base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_diskid(), target);
  }

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extent_id().data(), static_cast<int>(this->_internal_extent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snail.stream.WriteExtentReq.extent_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extent_id(), target);
  }

  // uint64 off = 4;
  if (this->_internal_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_off(), target);
  }

  // uint64 len = 5;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.WriteExtentReq)
  return target;
}

size_t WriteExtentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.WriteExtentReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extent_id());
  }

  // .snail.stream.CommonReq base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 off = 4;
  if (this->_internal_off() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_off());
  }

  // uint64 len = 5;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteExtentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteExtentReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteExtentReq::GetClassData() const { return &_class_data_; }

void WriteExtentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteExtentReq *>(to)->MergeFrom(
      static_cast<const WriteExtentReq &>(from));
}


void WriteExtentReq::MergeFrom(const WriteExtentReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.WriteExtentReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extent_id().empty()) {
    _internal_set_extent_id(from._internal_extent_id());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonReq::MergeFrom(from._internal_base());
  }
  if (from._internal_off() != 0) {
    _internal_set_off(from._internal_off());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from._internal_diskid() != 0) {
    _internal_set_diskid(from._internal_diskid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteExtentReq::CopyFrom(const WriteExtentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.WriteExtentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteExtentReq::IsInitialized() const {
  return true;
}

void WriteExtentReq::InternalSwap(WriteExtentReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extent_id_, lhs_arena,
      &other->extent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteExtentReq, diskid_)
      + sizeof(WriteExtentReq::diskid_)
      - PROTOBUF_FIELD_OFFSET(WriteExtentReq, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteExtentReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[0]);
}

// ===================================================================

class ReadExtentReq::_Internal {
 public:
  static const ::snail::stream::CommonReq& base(const ReadExtentReq* msg);
};

const ::snail::stream::CommonReq&
ReadExtentReq::_Internal::base(const ReadExtentReq* msg) {
  return *msg->base_;
}
void ReadExtentReq::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ReadExtentReq::ReadExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.ReadExtentReq)
}
ReadExtentReq::ReadExtentReq(const ReadExtentReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extent_id().empty()) {
    extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extent_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonReq(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&off_, &from.off_,
    static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&off_)) + sizeof(diskid_));
  // @@protoc_insertion_point(copy_constructor:snail.stream.ReadExtentReq)
}

void ReadExtentReq::SharedCtor() {
extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&base_)) + sizeof(diskid_));
}

ReadExtentReq::~ReadExtentReq() {
  // @@protoc_insertion_point(destructor:snail.stream.ReadExtentReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadExtentReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void ReadExtentReq::ArenaDtor(void* object) {
  ReadExtentReq* _this = reinterpret_cast< ReadExtentReq* >(object);
  (void)_this;
}
void ReadExtentReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadExtentReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadExtentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.ReadExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&off_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diskid_) -
      reinterpret_cast<char*>(&off_)) + sizeof(diskid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadExtentReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonReq base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 diskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snail.stream.ReadExtentReq.extent_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 off = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadExtentReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.ReadExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonReq base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_diskid(), target);
  }

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extent_id().data(), static_cast<int>(this->_internal_extent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snail.stream.ReadExtentReq.extent_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extent_id(), target);
  }

  // uint64 off = 4;
  if (this->_internal_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_off(), target);
  }

  // uint64 len = 5;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.ReadExtentReq)
  return target;
}

size_t ReadExtentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.ReadExtentReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extent_id());
  }

  // .snail.stream.CommonReq base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 off = 4;
  if (this->_internal_off() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_off());
  }

  // uint64 len = 5;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadExtentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadExtentReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadExtentReq::GetClassData() const { return &_class_data_; }

void ReadExtentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadExtentReq *>(to)->MergeFrom(
      static_cast<const ReadExtentReq &>(from));
}


void ReadExtentReq::MergeFrom(const ReadExtentReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.ReadExtentReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extent_id().empty()) {
    _internal_set_extent_id(from._internal_extent_id());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonReq::MergeFrom(from._internal_base());
  }
  if (from._internal_off() != 0) {
    _internal_set_off(from._internal_off());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from._internal_diskid() != 0) {
    _internal_set_diskid(from._internal_diskid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadExtentReq::CopyFrom(const ReadExtentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.ReadExtentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadExtentReq::IsInitialized() const {
  return true;
}

void ReadExtentReq::InternalSwap(ReadExtentReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extent_id_, lhs_arena,
      &other->extent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadExtentReq, diskid_)
      + sizeof(ReadExtentReq::diskid_)
      - PROTOBUF_FIELD_OFFSET(ReadExtentReq, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadExtentReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[1]);
}

// ===================================================================

class ReadExtentResp::_Internal {
 public:
  static const ::snail::stream::CommonResp& base(const ReadExtentResp* msg);
};

const ::snail::stream::CommonResp&
ReadExtentResp::_Internal::base(const ReadExtentResp* msg) {
  return *msg->base_;
}
void ReadExtentResp::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
ReadExtentResp::ReadExtentResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.ReadExtentResp)
}
ReadExtentResp::ReadExtentResp(const ReadExtentResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:snail.stream.ReadExtentResp)
}

void ReadExtentResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&base_)) + sizeof(len_));
}

ReadExtentResp::~ReadExtentResp() {
  // @@protoc_insertion_point(destructor:snail.stream.ReadExtentResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReadExtentResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void ReadExtentResp::ArenaDtor(void* object) {
  ReadExtentResp* _this = reinterpret_cast< ReadExtentResp* >(object);
  (void)_this;
}
void ReadExtentResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadExtentResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReadExtentResp::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.ReadExtentResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  len_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadExtentResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadExtentResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.ReadExtentResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint64 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.ReadExtentResp)
  return target;
}

size_t ReadExtentResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.ReadExtentResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadExtentResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReadExtentResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadExtentResp::GetClassData() const { return &_class_data_; }

void ReadExtentResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReadExtentResp *>(to)->MergeFrom(
      static_cast<const ReadExtentResp &>(from));
}


void ReadExtentResp::MergeFrom(const ReadExtentResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.ReadExtentResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(from._internal_base());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadExtentResp::CopyFrom(const ReadExtentResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.ReadExtentResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadExtentResp::IsInitialized() const {
  return true;
}

void ReadExtentResp::InternalSwap(ReadExtentResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadExtentResp, len_)
      + sizeof(ReadExtentResp::len_)
      - PROTOBUF_FIELD_OFFSET(ReadExtentResp, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadExtentResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[2]);
}

// ===================================================================

class DeleteExtentReq::_Internal {
 public:
  static const ::snail::stream::CommonResp& base(const DeleteExtentReq* msg);
};

const ::snail::stream::CommonResp&
DeleteExtentReq::_Internal::base(const DeleteExtentReq* msg) {
  return *msg->base_;
}
void DeleteExtentReq::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
DeleteExtentReq::DeleteExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.DeleteExtentReq)
}
DeleteExtentReq::DeleteExtentReq(const DeleteExtentReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extent_id().empty()) {
    extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extent_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  diskid_ = from.diskid_;
  // @@protoc_insertion_point(copy_constructor:snail.stream.DeleteExtentReq)
}

void DeleteExtentReq::SharedCtor() {
extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&base_)) + sizeof(diskid_));
}

DeleteExtentReq::~DeleteExtentReq() {
  // @@protoc_insertion_point(destructor:snail.stream.DeleteExtentReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteExtentReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void DeleteExtentReq::ArenaDtor(void* object) {
  DeleteExtentReq* _this = reinterpret_cast< DeleteExtentReq* >(object);
  (void)_this;
}
void DeleteExtentReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteExtentReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteExtentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.DeleteExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  diskid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteExtentReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 diskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snail.stream.DeleteExtentReq.extent_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteExtentReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.DeleteExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_diskid(), target);
  }

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extent_id().data(), static_cast<int>(this->_internal_extent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snail.stream.DeleteExtentReq.extent_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.DeleteExtentReq)
  return target;
}

size_t DeleteExtentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.DeleteExtentReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extent_id());
  }

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteExtentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteExtentReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteExtentReq::GetClassData() const { return &_class_data_; }

void DeleteExtentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteExtentReq *>(to)->MergeFrom(
      static_cast<const DeleteExtentReq &>(from));
}


void DeleteExtentReq::MergeFrom(const DeleteExtentReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.DeleteExtentReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extent_id().empty()) {
    _internal_set_extent_id(from._internal_extent_id());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(from._internal_base());
  }
  if (from._internal_diskid() != 0) {
    _internal_set_diskid(from._internal_diskid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteExtentReq::CopyFrom(const DeleteExtentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.DeleteExtentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteExtentReq::IsInitialized() const {
  return true;
}

void DeleteExtentReq::InternalSwap(DeleteExtentReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extent_id_, lhs_arena,
      &other->extent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteExtentReq, diskid_)
      + sizeof(DeleteExtentReq::diskid_)
      - PROTOBUF_FIELD_OFFSET(DeleteExtentReq, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteExtentReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[3]);
}

// ===================================================================

class CreateExtentReq::_Internal {
 public:
  static const ::snail::stream::CommonResp& base(const CreateExtentReq* msg);
};

const ::snail::stream::CommonResp&
CreateExtentReq::_Internal::base(const CreateExtentReq* msg) {
  return *msg->base_;
}
void CreateExtentReq::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
CreateExtentReq::CreateExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.CreateExtentReq)
}
CreateExtentReq::CreateExtentReq(const CreateExtentReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extent_id().empty()) {
    extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extent_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  diskid_ = from.diskid_;
  // @@protoc_insertion_point(copy_constructor:snail.stream.CreateExtentReq)
}

void CreateExtentReq::SharedCtor() {
extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&base_)) + sizeof(diskid_));
}

CreateExtentReq::~CreateExtentReq() {
  // @@protoc_insertion_point(destructor:snail.stream.CreateExtentReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateExtentReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void CreateExtentReq::ArenaDtor(void* object) {
  CreateExtentReq* _this = reinterpret_cast< CreateExtentReq* >(object);
  (void)_this;
}
void CreateExtentReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateExtentReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateExtentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.CreateExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  diskid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateExtentReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 diskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snail.stream.CreateExtentReq.extent_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateExtentReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.CreateExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_diskid(), target);
  }

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extent_id().data(), static_cast<int>(this->_internal_extent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snail.stream.CreateExtentReq.extent_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.CreateExtentReq)
  return target;
}

size_t CreateExtentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.CreateExtentReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extent_id());
  }

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateExtentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateExtentReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateExtentReq::GetClassData() const { return &_class_data_; }

void CreateExtentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateExtentReq *>(to)->MergeFrom(
      static_cast<const CreateExtentReq &>(from));
}


void CreateExtentReq::MergeFrom(const CreateExtentReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.CreateExtentReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extent_id().empty()) {
    _internal_set_extent_id(from._internal_extent_id());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(from._internal_base());
  }
  if (from._internal_diskid() != 0) {
    _internal_set_diskid(from._internal_diskid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateExtentReq::CopyFrom(const CreateExtentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.CreateExtentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateExtentReq::IsInitialized() const {
  return true;
}

void CreateExtentReq::InternalSwap(CreateExtentReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extent_id_, lhs_arena,
      &other->extent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateExtentReq, diskid_)
      + sizeof(CreateExtentReq::diskid_)
      - PROTOBUF_FIELD_OFFSET(CreateExtentReq, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateExtentReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[4]);
}

// ===================================================================

class GetExtentReq::_Internal {
 public:
  static const ::snail::stream::CommonResp& base(const GetExtentReq* msg);
};

const ::snail::stream::CommonResp&
GetExtentReq::_Internal::base(const GetExtentReq* msg) {
  return *msg->base_;
}
void GetExtentReq::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetExtentReq::GetExtentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.GetExtentReq)
}
GetExtentReq::GetExtentReq(const GetExtentReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extent_id().empty()) {
    extent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extent_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  diskid_ = from.diskid_;
  // @@protoc_insertion_point(copy_constructor:snail.stream.GetExtentReq)
}

void GetExtentReq::SharedCtor() {
extent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&diskid_) -
    reinterpret_cast<char*>(&base_)) + sizeof(diskid_));
}

GetExtentReq::~GetExtentReq() {
  // @@protoc_insertion_point(destructor:snail.stream.GetExtentReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExtentReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  extent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
}

void GetExtentReq::ArenaDtor(void* object) {
  GetExtentReq* _this = reinterpret_cast< GetExtentReq* >(object);
  (void)_this;
}
void GetExtentReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExtentReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExtentReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.GetExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  diskid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExtentReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 diskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string extent_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snail.stream.GetExtentReq.extent_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExtentReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.GetExtentReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_diskid(), target);
  }

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extent_id().data(), static_cast<int>(this->_internal_extent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snail.stream.GetExtentReq.extent_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.GetExtentReq)
  return target;
}

size_t GetExtentReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.GetExtentReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string extent_id = 3;
  if (!this->_internal_extent_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extent_id());
  }

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExtentReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExtentReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExtentReq::GetClassData() const { return &_class_data_; }

void GetExtentReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExtentReq *>(to)->MergeFrom(
      static_cast<const GetExtentReq &>(from));
}


void GetExtentReq::MergeFrom(const GetExtentReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.GetExtentReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_extent_id().empty()) {
    _internal_set_extent_id(from._internal_extent_id());
  }
  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(from._internal_base());
  }
  if (from._internal_diskid() != 0) {
    _internal_set_diskid(from._internal_diskid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExtentReq::CopyFrom(const GetExtentReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.GetExtentReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExtentReq::IsInitialized() const {
  return true;
}

void GetExtentReq::InternalSwap(GetExtentReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extent_id_, lhs_arena,
      &other->extent_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExtentReq, diskid_)
      + sizeof(GetExtentReq::diskid_)
      - PROTOBUF_FIELD_OFFSET(GetExtentReq, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExtentReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[5]);
}

// ===================================================================

class GetExtentResp::_Internal {
 public:
  static const ::snail::stream::CommonResp& base(const GetExtentResp* msg);
};

const ::snail::stream::CommonResp&
GetExtentResp::_Internal::base(const GetExtentResp* msg) {
  return *msg->base_;
}
void GetExtentResp::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
GetExtentResp::GetExtentResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.GetExtentResp)
}
GetExtentResp::GetExtentResp(const GetExtentResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctime_) -
    reinterpret_cast<char*>(&len_)) + sizeof(ctime_));
  // @@protoc_insertion_point(copy_constructor:snail.stream.GetExtentResp)
}

void GetExtentResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ctime_) -
    reinterpret_cast<char*>(&base_)) + sizeof(ctime_));
}

GetExtentResp::~GetExtentResp() {
  // @@protoc_insertion_point(destructor:snail.stream.GetExtentResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetExtentResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void GetExtentResp::ArenaDtor(void* object) {
  GetExtentResp* _this = reinterpret_cast< GetExtentResp* >(object);
  (void)_this;
}
void GetExtentResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExtentResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetExtentResp::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.GetExtentResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctime_) -
      reinterpret_cast<char*>(&len_)) + sizeof(ctime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetExtentResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ctime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExtentResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.GetExtentResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint64 len = 2;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_len(), target);
  }

  // uint32 ctime = 3;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ctime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.GetExtentResp)
  return target;
}

size_t GetExtentResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.GetExtentResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint64 len = 2;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_len());
  }

  // uint32 ctime = 3;
  if (this->_internal_ctime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ctime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetExtentResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetExtentResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetExtentResp::GetClassData() const { return &_class_data_; }

void GetExtentResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetExtentResp *>(to)->MergeFrom(
      static_cast<const GetExtentResp &>(from));
}


void GetExtentResp::MergeFrom(const GetExtentResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.GetExtentResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(from._internal_base());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from._internal_ctime() != 0) {
    _internal_set_ctime(from._internal_ctime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetExtentResp::CopyFrom(const GetExtentResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.GetExtentResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExtentResp::IsInitialized() const {
  return true;
}

void GetExtentResp::InternalSwap(GetExtentResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetExtentResp, ctime_)
      + sizeof(GetExtentResp::ctime_)
      - PROTOBUF_FIELD_OFFSET(GetExtentResp, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExtentResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[6]);
}

// ===================================================================

class UpdateDiskStatusReq::_Internal {
 public:
  static const ::snail::stream::CommonResp& base(const UpdateDiskStatusReq* msg);
};

const ::snail::stream::CommonResp&
UpdateDiskStatusReq::_Internal::base(const UpdateDiskStatusReq* msg) {
  return *msg->base_;
}
void UpdateDiskStatusReq::clear_base() {
  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
UpdateDiskStatusReq::UpdateDiskStatusReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:snail.stream.UpdateDiskStatusReq)
}
UpdateDiskStatusReq::UpdateDiskStatusReq(const UpdateDiskStatusReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    base_ = new ::snail::stream::CommonResp(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&diskid_, &from.diskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&diskid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:snail.stream.UpdateDiskStatusReq)
}

void UpdateDiskStatusReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&base_)) + sizeof(status_));
}

UpdateDiskStatusReq::~UpdateDiskStatusReq() {
  // @@protoc_insertion_point(destructor:snail.stream.UpdateDiskStatusReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateDiskStatusReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_;
}

void UpdateDiskStatusReq::ArenaDtor(void* object) {
  UpdateDiskStatusReq* _this = reinterpret_cast< UpdateDiskStatusReq* >(object);
  (void)_this;
}
void UpdateDiskStatusReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDiskStatusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateDiskStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:snail.stream.UpdateDiskStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  ::memset(&diskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&diskid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDiskStatusReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .snail.stream.CommonResp base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 diskid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDiskStatusReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snail.stream.UpdateDiskStatusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base(this), target, stream);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_diskid(), target);
  }

  // uint32 status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snail.stream.UpdateDiskStatusReq)
  return target;
}

size_t UpdateDiskStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snail.stream.UpdateDiskStatusReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .snail.stream.CommonResp base = 1;
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // uint32 diskid = 2;
  if (this->_internal_diskid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_diskid());
  }

  // uint32 status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDiskStatusReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateDiskStatusReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDiskStatusReq::GetClassData() const { return &_class_data_; }

void UpdateDiskStatusReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateDiskStatusReq *>(to)->MergeFrom(
      static_cast<const UpdateDiskStatusReq &>(from));
}


void UpdateDiskStatusReq::MergeFrom(const UpdateDiskStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snail.stream.UpdateDiskStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _internal_mutable_base()->::snail::stream::CommonResp::MergeFrom(from._internal_base());
  }
  if (from._internal_diskid() != 0) {
    _internal_set_diskid(from._internal_diskid());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDiskStatusReq::CopyFrom(const UpdateDiskStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snail.stream.UpdateDiskStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDiskStatusReq::IsInitialized() const {
  return true;
}

void UpdateDiskStatusReq::InternalSwap(UpdateDiskStatusReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDiskStatusReq, status_)
      + sizeof(UpdateDiskStatusReq::status_)
      - PROTOBUF_FIELD_OFFSET(UpdateDiskStatusReq, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDiskStatusReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_extentnode_2eproto_getter, &descriptor_table_extentnode_2eproto_once,
      file_level_metadata_extentnode_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stream
}  // namespace snail
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snail::stream::WriteExtentReq* Arena::CreateMaybeMessage< ::snail::stream::WriteExtentReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::WriteExtentReq >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::ReadExtentReq* Arena::CreateMaybeMessage< ::snail::stream::ReadExtentReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::ReadExtentReq >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::ReadExtentResp* Arena::CreateMaybeMessage< ::snail::stream::ReadExtentResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::ReadExtentResp >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::DeleteExtentReq* Arena::CreateMaybeMessage< ::snail::stream::DeleteExtentReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::DeleteExtentReq >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::CreateExtentReq* Arena::CreateMaybeMessage< ::snail::stream::CreateExtentReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::CreateExtentReq >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::GetExtentReq* Arena::CreateMaybeMessage< ::snail::stream::GetExtentReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::GetExtentReq >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::GetExtentResp* Arena::CreateMaybeMessage< ::snail::stream::GetExtentResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::GetExtentResp >(arena);
}
template<> PROTOBUF_NOINLINE ::snail::stream::UpdateDiskStatusReq* Arena::CreateMaybeMessage< ::snail::stream::UpdateDiskStatusReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snail::stream::UpdateDiskStatusReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
