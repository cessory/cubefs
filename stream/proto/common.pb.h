// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace snail {
namespace stream {
class CommonReq;
class CommonReqDefaultTypeInternal;
extern CommonReqDefaultTypeInternal _CommonReq_default_instance_;
class CommonReq_HeadersEntry_DoNotUse;
class CommonReq_HeadersEntry_DoNotUseDefaultTypeInternal;
extern CommonReq_HeadersEntry_DoNotUseDefaultTypeInternal _CommonReq_HeadersEntry_DoNotUse_default_instance_;
class CommonResp;
class CommonRespDefaultTypeInternal;
extern CommonRespDefaultTypeInternal _CommonResp_default_instance_;
class CommonResp_HeadersEntry_DoNotUse;
class CommonResp_HeadersEntry_DoNotUseDefaultTypeInternal;
extern CommonResp_HeadersEntry_DoNotUseDefaultTypeInternal _CommonResp_HeadersEntry_DoNotUse_default_instance_;
}  // namespace stream
}  // namespace snail
namespace google {
namespace protobuf {
template<> ::snail::stream::CommonReq* Arena::CreateMaybeMessage<::snail::stream::CommonReq>(Arena*);
template<> ::snail::stream::CommonReq_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::snail::stream::CommonReq_HeadersEntry_DoNotUse>(Arena*);
template<> ::snail::stream::CommonResp* Arena::CreateMaybeMessage<::snail::stream::CommonResp>(Arena*);
template<> ::snail::stream::CommonResp_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::snail::stream::CommonResp_HeadersEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace snail {
namespace stream {

// ===================================================================

class CommonReq_HeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CommonReq_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CommonReq_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CommonReq_HeadersEntry_DoNotUse();
  CommonReq_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CommonReq_HeadersEntry_DoNotUse& other);
  static const CommonReq_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommonReq_HeadersEntry_DoNotUse*>(&_CommonReq_HeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CommonReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.CommonReq) */ {
 public:
  CommonReq();
  virtual ~CommonReq();

  CommonReq(const CommonReq& from);

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonReq(CommonReq&& from) noexcept
    : CommonReq() {
    *this = ::std::move(from);
  }

  inline CommonReq& operator=(CommonReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonReq* internal_default_instance() {
    return reinterpret_cast<const CommonReq*>(
               &_CommonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CommonReq* other);
  friend void swap(CommonReq& a, CommonReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonReq* New() const final {
    return CreateMaybeMessage<CommonReq>(NULL);
  }

  CommonReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonReq& from);
  void MergeFrom(const CommonReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> headers = 2;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_headers();

  // uint64 reqid = 1;
  void clear_reqid();
  static const int kReqidFieldNumber = 1;
  ::google::protobuf::uint64 reqid() const;
  void set_reqid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:snail.stream.CommonReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CommonReq_HeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::google::protobuf::uint64 reqid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonResp_HeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CommonResp_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CommonResp_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CommonResp_HeadersEntry_DoNotUse();
  CommonResp_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CommonResp_HeadersEntry_DoNotUse& other);
  static const CommonResp_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommonResp_HeadersEntry_DoNotUse*>(&_CommonResp_HeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CommonResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:snail.stream.CommonResp) */ {
 public:
  CommonResp();
  virtual ~CommonResp();

  CommonResp(const CommonResp& from);

  inline CommonResp& operator=(const CommonResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonResp(CommonResp&& from) noexcept
    : CommonResp() {
    *this = ::std::move(from);
  }

  inline CommonResp& operator=(CommonResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonResp* internal_default_instance() {
    return reinterpret_cast<const CommonResp*>(
               &_CommonResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CommonResp* other);
  friend void swap(CommonResp& a, CommonResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonResp* New() const final {
    return CreateMaybeMessage<CommonResp>(NULL);
  }

  CommonResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonResp& from);
  void MergeFrom(const CommonResp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> headers = 4;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_headers();

  // string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // uint64 reqid = 1;
  void clear_reqid();
  static const int kReqidFieldNumber = 1;
  ::google::protobuf::uint64 reqid() const;
  void set_reqid(::google::protobuf::uint64 value);

  // int32 code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:snail.stream.CommonResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CommonResp_HeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint64 reqid_;
  ::google::protobuf::int32 code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommonReq

// uint64 reqid = 1;
inline void CommonReq::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommonReq::reqid() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonReq.reqid)
  return reqid_;
}
inline void CommonReq::set_reqid(::google::protobuf::uint64 value) {
  
  reqid_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.CommonReq.reqid)
}

// map<string, string> headers = 2;
inline int CommonReq::headers_size() const {
  return headers_.size();
}
inline void CommonReq::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CommonReq::headers() const {
  // @@protoc_insertion_point(field_map:snail.stream.CommonReq.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CommonReq::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:snail.stream.CommonReq.headers)
  return headers_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommonResp

// uint64 reqid = 1;
inline void CommonResp::clear_reqid() {
  reqid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommonResp::reqid() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonResp.reqid)
  return reqid_;
}
inline void CommonResp::set_reqid(::google::protobuf::uint64 value) {
  
  reqid_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.CommonResp.reqid)
}

// int32 code = 2;
inline void CommonResp::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CommonResp::code() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonResp.code)
  return code_;
}
inline void CommonResp::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:snail.stream.CommonResp.code)
}

// string msg = 3;
inline void CommonResp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonResp::msg() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonResp.msg)
  return msg_.GetNoArena();
}
inline void CommonResp::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snail.stream.CommonResp.msg)
}
#if LANG_CXX11
inline void CommonResp::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snail.stream.CommonResp.msg)
}
#endif
inline void CommonResp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snail.stream.CommonResp.msg)
}
inline void CommonResp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snail.stream.CommonResp.msg)
}
inline ::std::string* CommonResp::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:snail.stream.CommonResp.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonResp::release_msg() {
  // @@protoc_insertion_point(field_release:snail.stream.CommonResp.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResp::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:snail.stream.CommonResp.msg)
}

// map<string, string> headers = 4;
inline int CommonResp::headers_size() const {
  return headers_.size();
}
inline void CommonResp::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CommonResp::headers() const {
  // @@protoc_insertion_point(field_map:snail.stream.CommonResp.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CommonResp::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:snail.stream.CommonResp.headers)
  return headers_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace snail

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
