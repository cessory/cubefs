// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace snail {
namespace stream {
class CommonReq;
struct CommonReqDefaultTypeInternal;
extern CommonReqDefaultTypeInternal _CommonReq_default_instance_;
class CommonReq_HeadersEntry_DoNotUse;
struct CommonReq_HeadersEntry_DoNotUseDefaultTypeInternal;
extern CommonReq_HeadersEntry_DoNotUseDefaultTypeInternal _CommonReq_HeadersEntry_DoNotUse_default_instance_;
class CommonResp;
struct CommonRespDefaultTypeInternal;
extern CommonRespDefaultTypeInternal _CommonResp_default_instance_;
class CommonResp_HeadersEntry_DoNotUse;
struct CommonResp_HeadersEntry_DoNotUseDefaultTypeInternal;
extern CommonResp_HeadersEntry_DoNotUseDefaultTypeInternal _CommonResp_HeadersEntry_DoNotUse_default_instance_;
}  // namespace stream
}  // namespace snail
PROTOBUF_NAMESPACE_OPEN
template<> ::snail::stream::CommonReq* Arena::CreateMaybeMessage<::snail::stream::CommonReq>(Arena*);
template<> ::snail::stream::CommonReq_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::snail::stream::CommonReq_HeadersEntry_DoNotUse>(Arena*);
template<> ::snail::stream::CommonResp* Arena::CreateMaybeMessage<::snail::stream::CommonResp>(Arena*);
template<> ::snail::stream::CommonResp_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::snail::stream::CommonResp_HeadersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snail {
namespace stream {

// ===================================================================

class CommonReq_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommonReq_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommonReq_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CommonReq_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CommonReq_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CommonReq_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommonReq_HeadersEntry_DoNotUse& other);
  static const CommonReq_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommonReq_HeadersEntry_DoNotUse*>(&_CommonReq_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "snail.stream.CommonReq.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "snail.stream.CommonReq.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CommonReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.CommonReq) */ {
 public:
  inline CommonReq() : CommonReq(nullptr) {}
  ~CommonReq() override;
  explicit PROTOBUF_CONSTEXPR CommonReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonReq(const CommonReq& from);
  CommonReq(CommonReq&& from) noexcept
    : CommonReq() {
    *this = ::std::move(from);
  }

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonReq& operator=(CommonReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonReq* internal_default_instance() {
    return reinterpret_cast<const CommonReq*>(
               &_CommonReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommonReq& a, CommonReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonReq& from) {
    CommonReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.CommonReq";
  }
  protected:
  explicit CommonReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kReqidFieldNumber = 1,
  };
  // map<string, string> headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string reqid = 1;
  void clear_reqid();
  const std::string& reqid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reqid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reqid();
  PROTOBUF_NODISCARD std::string* release_reqid();
  void set_allocated_reqid(std::string* reqid);
  private:
  const std::string& _internal_reqid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqid(const std::string& value);
  std::string* _internal_mutable_reqid();
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.CommonReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CommonReq_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class CommonResp_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommonResp_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommonResp_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CommonResp_HeadersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CommonResp_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CommonResp_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommonResp_HeadersEntry_DoNotUse& other);
  static const CommonResp_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommonResp_HeadersEntry_DoNotUse*>(&_CommonResp_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "snail.stream.CommonResp.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "snail.stream.CommonResp.HeadersEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2eproto;
};

// -------------------------------------------------------------------

class CommonResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snail.stream.CommonResp) */ {
 public:
  inline CommonResp() : CommonResp(nullptr) {}
  ~CommonResp() override;
  explicit PROTOBUF_CONSTEXPR CommonResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonResp(const CommonResp& from);
  CommonResp(CommonResp&& from) noexcept
    : CommonResp() {
    *this = ::std::move(from);
  }

  inline CommonResp& operator=(const CommonResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonResp& operator=(CommonResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonResp* internal_default_instance() {
    return reinterpret_cast<const CommonResp*>(
               &_CommonResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommonResp& a, CommonResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonResp& from) {
    CommonResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snail.stream.CommonResp";
  }
  protected:
  explicit CommonResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 4,
    kReqidFieldNumber = 1,
    kReasonFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // map<string, string> headers = 4;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string reqid = 1;
  void clear_reqid();
  const std::string& reqid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reqid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reqid();
  PROTOBUF_NODISCARD std::string* release_reqid();
  void set_allocated_reqid(std::string* reqid);
  private:
  const std::string& _internal_reqid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reqid(const std::string& value);
  std::string* _internal_mutable_reqid();
  public:

  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:snail.stream.CommonResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CommonResp_HeadersEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommonReq

// string reqid = 1;
inline void CommonReq::clear_reqid() {
  _impl_.reqid_.ClearToEmpty();
}
inline const std::string& CommonReq::reqid() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonReq.reqid)
  return _internal_reqid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonReq::set_reqid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reqid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.CommonReq.reqid)
}
inline std::string* CommonReq::mutable_reqid() {
  std::string* _s = _internal_mutable_reqid();
  // @@protoc_insertion_point(field_mutable:snail.stream.CommonReq.reqid)
  return _s;
}
inline const std::string& CommonReq::_internal_reqid() const {
  return _impl_.reqid_.Get();
}
inline void CommonReq::_internal_set_reqid(const std::string& value) {
  
  _impl_.reqid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonReq::_internal_mutable_reqid() {
  
  return _impl_.reqid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonReq::release_reqid() {
  // @@protoc_insertion_point(field_release:snail.stream.CommonReq.reqid)
  return _impl_.reqid_.Release();
}
inline void CommonReq::set_allocated_reqid(std::string* reqid) {
  if (reqid != nullptr) {
    
  } else {
    
  }
  _impl_.reqid_.SetAllocated(reqid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reqid_.IsDefault()) {
    _impl_.reqid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.CommonReq.reqid)
}

// map<string, string> headers = 2;
inline int CommonReq::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int CommonReq::headers_size() const {
  return _internal_headers_size();
}
inline void CommonReq::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommonReq::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommonReq::headers() const {
  // @@protoc_insertion_point(field_map:snail.stream.CommonReq.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommonReq::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommonReq::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:snail.stream.CommonReq.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommonResp

// string reqid = 1;
inline void CommonResp::clear_reqid() {
  _impl_.reqid_.ClearToEmpty();
}
inline const std::string& CommonResp::reqid() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonResp.reqid)
  return _internal_reqid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResp::set_reqid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reqid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.CommonResp.reqid)
}
inline std::string* CommonResp::mutable_reqid() {
  std::string* _s = _internal_mutable_reqid();
  // @@protoc_insertion_point(field_mutable:snail.stream.CommonResp.reqid)
  return _s;
}
inline const std::string& CommonResp::_internal_reqid() const {
  return _impl_.reqid_.Get();
}
inline void CommonResp::_internal_set_reqid(const std::string& value) {
  
  _impl_.reqid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResp::_internal_mutable_reqid() {
  
  return _impl_.reqid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResp::release_reqid() {
  // @@protoc_insertion_point(field_release:snail.stream.CommonResp.reqid)
  return _impl_.reqid_.Release();
}
inline void CommonResp::set_allocated_reqid(std::string* reqid) {
  if (reqid != nullptr) {
    
  } else {
    
  }
  _impl_.reqid_.SetAllocated(reqid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reqid_.IsDefault()) {
    _impl_.reqid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.CommonResp.reqid)
}

// int32 code = 2;
inline void CommonResp::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t CommonResp::_internal_code() const {
  return _impl_.code_;
}
inline int32_t CommonResp::code() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonResp.code)
  return _internal_code();
}
inline void CommonResp::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void CommonResp::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:snail.stream.CommonResp.code)
}

// string reason = 3;
inline void CommonResp::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& CommonResp::reason() const {
  // @@protoc_insertion_point(field_get:snail.stream.CommonResp.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonResp::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:snail.stream.CommonResp.reason)
}
inline std::string* CommonResp::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:snail.stream.CommonResp.reason)
  return _s;
}
inline const std::string& CommonResp::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void CommonResp::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonResp::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonResp::release_reason() {
  // @@protoc_insertion_point(field_release:snail.stream.CommonResp.reason)
  return _impl_.reason_.Release();
}
inline void CommonResp::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:snail.stream.CommonResp.reason)
}

// map<string, string> headers = 4;
inline int CommonResp::_internal_headers_size() const {
  return _impl_.headers_.size();
}
inline int CommonResp::headers_size() const {
  return _internal_headers_size();
}
inline void CommonResp::clear_headers() {
  _impl_.headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommonResp::_internal_headers() const {
  return _impl_.headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommonResp::headers() const {
  // @@protoc_insertion_point(field_map:snail.stream.CommonResp.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommonResp::_internal_mutable_headers() {
  return _impl_.headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommonResp::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:snail.stream.CommonResp.headers)
  return _internal_mutable_headers();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stream
}  // namespace snail

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
